
--- Entry: 2025-05-08T20:32:46.509Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Extracting AI Data',
  promptSent: null,
  rawResponseReceived: null,
  parsedResponse: null,
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:32:48.877Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'AI Data Extracted, Starting DB Transaction',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy):**\n' +
    '        *   If `customerNotes` contain a clear section (e.g., starting with "Personalisation:") AND `quantityOrdered > 1`, AND subsequent lines appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red"):\n' +
    '            *   Treat each such `Name Color` line as a distinct sub-item.\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") from that *same line*.\n' +
    "            *   This line-specific `color1` should take precedence over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   If a line does not clearly fit the `Name Color` pattern after a "Personalisation:" block, or if a color is missing on a line, fall back to standard extraction rules for that sub-item, and flag `needsReview: true` for that sub-item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\n' +
    "        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\n" +
    '            *   Set `overallNeedsReview` to `true`.\n' +
    '            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\n' +
    '            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\n' +
    '            *   **Action on Mismatch (Revised Again):**\n' +
    '                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RE'... 13681 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:32:48.879Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Dry Run Complete',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy):**\n' +
    '        *   If `customerNotes` contain a clear section (e.g., starting with "Personalisation:") AND `quantityOrdered > 1`, AND subsequent lines appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red"):\n' +
    '            *   Treat each such `Name Color` line as a distinct sub-item.\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") from that *same line*.\n' +
    "            *   This line-specific `color1` should take precedence over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   If a line does not clearly fit the `Name Color` pattern after a "Personalisation:" block, or if a color is missing on a line, fall back to standard extraction rules for that sub-item, and flag `needsReview: true` for that sub-item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\n' +
    "        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\n" +
    '            *   Set `overallNeedsReview` to `true`.\n' +
    '            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\n' +
    '            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\n' +
    '            *   **Action on Mismatch (Revised Again):**\n' +
    '                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RE'... 13681 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:33:23.735Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Extracting AI Data',
  promptSent: null,
  rawResponseReceived: null,
  parsedResponse: null,
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:33:26.247Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'AI Data Extracted, Starting DB Transaction',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14636 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:33:26.248Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Dry Run Complete',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14636 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:33:49.130Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Extracting AI Data',
  promptSent: null,
  rawResponseReceived: null,
  parsedResponse: null,
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4-turbo',
  items: []
}

--- Entry: 2025-05-08T20:33:56.393Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'AI Data Extracted, Starting DB Transaction',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14636 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4-turbo',
  items: []
}

--- Entry: 2025-05-08T20:33:56.395Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Dry Run Complete',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14636 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4-turbo',
  items: []
}

--- Entry: 2025-05-08T20:36:05.567Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Extracting AI Data',
  promptSent: null,
  rawResponseReceived: null,
  parsedResponse: null,
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:36:07.934Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'AI Data Extracted, Starting DB Transaction',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14636 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:36:07.935Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Dry Run Complete',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14636 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 8,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Halima',
            color1: 'Magenta',
            color2: null,
            quantity: 8,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4.1-mini',
  items: []
}

--- Entry: 2025-05-08T20:39:52.395Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Extracting AI Data',
  promptSent: null,
  rawResponseReceived: null,
  parsedResponse: null,
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4-turbo',
  items: []
}

--- Entry: 2025-05-08T20:40:11.349Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'AI Data Extracted, Starting DB Transaction',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14737 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Hayan",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Ava",\n' +
    '          "color1": "Red",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Erona",\n' +
    '          "color1": "Purple",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Ka",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Erum",\n' +
    '          "color1": "Blue",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Ozlem",\n' +
    '          "color1": "Purple",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Moriam",\n' +
    '          "color1": "Yellow",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Yellow",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Hayan',
            color1: 'Magenta',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Ava',
            color1: 'Red',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Erona',
            color1: 'Purple',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Ka',
            color1: 'Magenta',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Erum',
            color1: 'Blue',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Ozlem',
            color1: 'Purple',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Moriam',
            color1: 'Yellow',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Halima',
            color1: 'Yellow',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4-turbo',
  items: []
}

--- Entry: 2025-05-08T20:40:11.351Z ---
{
  orderId: 30984,
  orderNumber: '3672783640',
  marketplace: 'etsy',
  overallStatus: 'Dry Run Complete',
  promptSent: 'System:\n' +
    '# System Prompt\n' +
    '**Purpose**\n' +
    '\n' +
    'You are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\n' +
    '\n' +
    '**Instructions**\n' +
    '\n' +
    'Focus exclusively on:\n' +
    '- The JSON data provided under the "Actual Order Data" heading.\n' +
    '\n' +
    'Ignore:\n' +
    '- Any previous context or external information.\n' +
    '\n' +
    '**Output Requirements**\n' +
    '\n' +
    'Your response must:\n' +
    '- Be a valid JSON object, starting with `{` and ending with `}`.\n' +
    '- Contain only the JSON object without any additional text, explanations, or formatting.\n' +
    "- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\n" +
    '\n' +
    '**JSON Structure**\n' +
    '\n' +
    '```json\n' +
    '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "INTERNAL_ITEM_ID": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "...", // The extracted personalization text (e.g., name, registration)\n' +
    '          "color1": "...",     // Primary color, if applicable\n' +
    '          "color2": null,      // Secondary color (for 2-color items), if applicable\n' +
    '          "quantity": 1,       // Quantity for this specific personalization (usually 1 if split)\n' +
    '          "needsReview": false,// Flag if manual review is needed\n' +
    '          "reviewReason": null,// Reason for review flag or informative note\n' +
    '          "annotation": null   // Optional internal annotation (e.g., about splitting)\n' +
    '        }\n' +
    '        // ... potentially more personalization objects if split from input ...\n' +
    '      ],\n' +
    '      "overallNeedsReview": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\n' +
    '      "overallReviewReason": null  // Reason for overall item review\n' +
    '    }\n' +
    '  }\n' +
    '}\n' +
    '```\n' +
    '\n' +
    '**IMPORTANT: Default Handling for Missing Personalization**\n' +
    '\n' +
    "You MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\n" +
    '- Create an entry for that `INTERNAL_ITEM_ID`.\n' +
    '- Include a *single* object in the `personalizations` array with:\n' +
    '    - `"customText": null`\n' +
    '    - `"color1": null`\n' +
    '    - `"color2": null`\n' +
    '    - `"quantity"` set to match the item\'s original `"quantityOrdered"` value.\n' +
    '    - `"needsReview": true`\n' +
    '    - `"reviewReason": "No personalization details found"`\n' +
    '- Set `"overallNeedsReview": true` for the item.\n' +
    '- Set `"overallReviewReason": "No personalization details found"` for the item.\n' +
    '\n' +
    '**Core Personalization Extraction Logic**\n' +
    '\n' +
    'For each item in the input `items` array:\n' +
    '1.  **Examine `customerNotes` FIRST for explicit color/text:**\n' +
    '    *   Look thoroughly for lines starting with "Personalisation:", "Text:", "Name:", etc. Use the value following this as the primary source for `customText`.\n' +
    '    *   Look thoroughly for lines starting with "Colour:", "Color:", "Primary Colour:", etc. Use the value following this as the primary source for `color1`.\n' +
    '    *   Look thoroughly for lines starting with "Secondary colour:", "Color 2:", etc. Use the value following this as the primary source for `color2`.\n' +
    '2.  **Examine `print_settings` SECOND:**\n' +
    '    *   If `customText` was NOT found in notes, look for options named "Personalization", "Text", "Custom Text", "Name", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color1` was NOT found in notes, look for options named "Color", "Colour 1", etc., in `print_settings`. Use its `value` if found.\n' +
    '    *   If `color2` was NOT found in notes, look for options named "Secondary color", "Colour 2", etc., in `print_settings`. Use its `value` if found.\n' +
    '3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., "[Light Blue]").\n' +
    '4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\n' +
    '5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the "Default Handling for Missing Personalization" rule.\n' +
    '\n' +
    '### Special Handling: Car Registration Keyrings (SKU contains "REGKEY")\n' +
    '# ... existing REGKEY handling ...\n' +
    '\n' +
    '### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\n' +
    '\n' +
    '**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\n' +
    '\n' +
    '**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., "Nx", "Set of N"), and the structure of `customerNotes` (e.g., multiple lines).\n' +
    '\n' +
    '**Parsing Strategy:**\n' +
    '\n' +
    '1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\n' +
    '    *   `quantityOrdered > 1`.\n' +
    '    *   The `productName` contains patterns like "Nx", "Set of N", "Pack of N" (where N is a number > 1).\n' +
    '    *   The `customerNotes` contain multiple lines (`\\n`) where each line appears to represent a distinct item.\n' +
    '    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\n' +
    '    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\n' +
    '\n' +
    '2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\n' +
    '    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\n' +
    '    *   Common patterns for splitting `customerNotes`:\n' +
    '        *   Each line is a separate personalization.\n' +
    '        *   Bulleted/numbered lists.\n' +
    '        *   Blank lines separate personalizations.\n' +
    '        *   Phrases like "Item 1:", "Person 2:", etc.\n' +
    '    *   **Special Handling for "Personalisation:" blocks (e.g., from Etsy) - CRITICAL & OVERRIDING:**\n' +
    '        *   If `customerNotes` (or a similar field representing buyer-provided personalization) contain a clear section indicative of multiple distinct items (e.g., starting with a keyword like "Personalisation:", "Details:", or simply multiple lines of text when `quantityOrdered > 1`) AND subsequent lines clearly appear to be `Name Color` pairs (e.g., "Layan Magenta", "Ava Red") or `Name` on one line and `Color` on the next for that name:\n' +
    '            *   **You MUST treat each such identified `Name Color` pair (or Name and its associated Color) as a distinct sub-item.**\n' +
    '            *   For `customText`, extract the Name part (e.g., "Layan").\n' +
    '            *   For `color1`, extract the Color part (e.g., "Magenta") directly associated with that name from the *same line or context block*.\n' +
    "            *   This line-specific or block-specific `color1` **MUST take precedence** over any general 'Colour:' field found at the item/SKU level or elsewhere in the notes for this sub-item's `color1`.\n" +
    '            *   **The `quantity` for EACH such created personalization object MUST be set to `1`.**\n' +
    '            *   If a line within such a block does not clearly fit the `Name Color` (or Name/Color) pattern, or if a color is missing for a name, you should still attempt to create a sub-item for the name, use `null` for the missing color, and set `needsReview: true`, `reviewReason: "Incomplete Name/Color pair in multi-item block"` for that sub-item.\n' +
    '            *   **Override for Quantity Validation:** If this "Personalisation:" block splitting logic is triggered and results in a number of personalization objects equal to `quantityOrdered`, then this is considered a successful split, even if other quantity validation rules might conflict. The primary goal here is to capture each distinct personalized item.\n' +
    '    *   For each identified sub-item/personalization (after applying any special handling above):\n' +
    "        *   Extract `customText`, `color1`, `color2` using the standard field extraction rules (Notes first, then Print Settings) but scoped to the text relevant to *this sub-item*, unless already determined by special handling (like the 'Name Color' line rule).\n" +
    '    *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\n' +
    '    *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\n' +
    '    *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\n' +
    '\n' +
    '3.  **No Splitting Attempted (If Not Triggered in Step 1):**\n' +
    '    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\n' +
    "    *   Set its `quantity` to the item's `quantityOrdered`.\n" +
    '    *   Extract `customText`, `color1`, `color2` based on the overall context.\n' +
    '    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\n' +
    '\n' +
    '4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\n' +
    '    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\n' +
    '    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\n' +
    "    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\n" +
    '    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., "30x" -> 30), or `null` if not present.\n' +
    '    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\n' +
    '\n' +
    '    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\n' +
    '        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `ov'... 14737 more characters,
  rawResponseReceived: '{\n' +
    '  "itemPersonalizations": {\n' +
    '    "64502": {\n' +
    '      "personalizations": [\n' +
    '        {\n' +
    '          "customText": "Hayan",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Ava",\n' +
    '          "color1": "Red",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Erona",\n' +
    '          "color1": "Purple",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Ka",\n' +
    '          "color1": "Magenta",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Erum",\n' +
    '          "color1": "Blue",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Ozlem",\n' +
    '          "color1": "Purple",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Moriam",\n' +
    '          "color1": "Yellow",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        },\n' +
    '        {\n' +
    '          "customText": "Halima",\n' +
    '          "color1": "Yellow",\n' +
    '          "color2": null,\n' +
    '          "quantity": 1,\n' +
    '          "needsReview": false,\n' +
    '          "reviewReason": null,\n' +
    '          "annotation": null\n' +
    '        }\n' +
    '      ],\n' +
    '      "overallNeedsReview": false,\n' +
    '      "overallReviewReason": null\n' +
    '    }\n' +
    '  }\n' +
    '}',
  parsedResponse: {
    itemPersonalizations: {
      '64502': {
        personalizations: [
          {
            customText: 'Hayan',
            color1: 'Magenta',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Ava',
            color1: 'Red',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Erona',
            color1: 'Purple',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Ka',
            color1: 'Magenta',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Erum',
            color1: 'Blue',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Ozlem',
            color1: 'Purple',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Moriam',
            color1: 'Yellow',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          },
          {
            customText: 'Halima',
            color1: 'Yellow',
            color2: null,
            quantity: 1,
            needsReview: false,
            reviewReason: null,
            annotation: null
          }
        ],
        overallNeedsReview: false,
        overallReviewReason: null
      }
    }
  },
  validationError: null,
  processingError: null,
  aiProvider: 'openai',
  modelUsed: 'gpt-4-turbo',
  items: []
}
