--- DEBUG: main() function started ---
{"level":30,"time":1746218276004,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Script Start: 2025-05-02T20:37:56.004Z ---"}
{"level":30,"time":1746218276005,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Processing 29 specified orders defined in script."}
{"level":30,"time":1746218276005,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Loading base prompts..."}
{"level":30,"time":1746218276057,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Prompts loaded."}
{"level":30,"time":1746218276057,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Added reinforcement instruction to system prompt for this run."}
{"level":30,"time":1746218276057,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Fetching specified orders..."}
--- DEBUG: Found 24 orders matching criteria ---
--- DEBUG: First found order ID: 30585 ---
{"level":40,"time":1746218276651,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Could not find the following specified orders: 3672803745, 3672841299, 3666514836, 3666534878, 3666588548"}
{"level":30,"time":1746218276651,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found 24 orders to process."}
{"level":30,"time":1746218276651,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30585 (13-13016-33910) ---"}
{"level":20,"time":1746218276651,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30585] Fetching latest data from ShipStation (ID: 270936730)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270936730
[API] Fetched single order 13-13016-33910 (ID: 270936730). Status: awaiting_shipment
{"level":20,"time":1746218277376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30585] No internal notes found."}
{"level":20,"time":1746218277376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30585] Notes match between DB and ShipStation."}
{"level":20,"time":1746218277377,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30585] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218277377,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] Preparing extraction..."}
{"level":10,"time":1746218277377,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] Input Data JSON:\\n{\n  \"orderId\": 30585,\n  \"orderNumber\": \"13-13016-33910\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Green\\nText: PUGS4LIFE!\",\n  \"items\": [\n    {\n      \"itemId\": 57132,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_4\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Green\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218277377,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218277377,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30585,\\n  \\\"orderNumber\\\": \\\"13-13016-33910\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Green\\\\nText: PUGS4LIFE!\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57132,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_4\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Green\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218287641,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] Call response status: 200 (10264ms)."}
{"level":20,"time":1746218287644,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"57132\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Pugs4Life!\",\n          \"color1\": \"Green\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":30,"time":1746218287645,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"57132\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Pugs4Life!\",\n          \"color1\": \"Green\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":20,"time":1746218287645,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] Parsed JSON response."}
{"level":30,"time":1746218287647,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30585] AI response validated."}
{"level":20,"time":1746218287677,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30585][Item 57132] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218287677,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30585][Item 57132] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218287677,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30585][Item 57132] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Pugs4Life!","msg":"Comparing custom_text"}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"db":null,"target":"Green","msg":"Comparing color_1"}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30585,"itemId":57132,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218287678,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30585][Item 57132][Task 2152] Updating task with: {\"custom_text\":\"Pugs4Life!\",\"color_1\":\"Green\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218287807,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30585][Item 57132] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Pugs4Life!\"},{\"name\":\"Colour 1\",\"value\":\"Green\"}]"}
{"level":30,"time":1746218287828,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30585] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218287828,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30585] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270936730
[API] Fetched single order 13-13016-33910 (ID: 270936730). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 270936730 …
[ShipStation API] Sending payload: {
  "orderId": 270936730,
  "orderNumber": "13-13016-33910",
  "orderKey": "13-13016-33910",
  "orderDate": "2025-04-30T10:20:03.0000000",
  "createDate": "2025-04-30T10:55:43.6300000",
  "modifyDate": "2025-04-30T10:55:48.6330000",
  "paymentDate": "2025-04-30T10:20:05.2330000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128147655,
  "customerUsername": "tkelloggs",
  "customerEmail": "0fa24f223e1e6bce9940@members.ebay.com",
  "billTo": {
    "name": "Tony Kelly",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07725947583",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Tony Kelly",
    "company": "",
    "street1": "34 School Drive",
    "street2": "ebaynhpglzb",
    "street3": null,
    "city": "Lymm",
    "state": "Warrington",
    "postalCode": "WA139UR",
    "country": "GB",
    "phone": "07725947583",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386183230,
      "lineItemKey": "10073354259113",
      "sku": "wi_395107128418_4",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Pugs4Life!"
        },
        {
          "name": "Colour 1",
          "value": "Green"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T10:55:43.597",
      "modifyDate": "2025-04-30T10:55:43.597"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Green\nText: PUGS4LIFE!",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nPugs4Life! (Green)\nDB Task Update 2025-05-02T20:38:08.528Z -> 10073354259113(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Pugs4Life! (Green)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 270936730.
{"level":30,"time":1746218289719,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30585] Successfully updated items: 10073354259113(AI)"}
{"level":30,"time":1746218289719,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30586 (02-13030-24343) ---"}
{"level":20,"time":1746218289719,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30586] Fetching latest data from ShipStation (ID: 270936739)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270936739
[API] Fetched single order 02-13030-24343 (ID: 270936739). Status: awaiting_shipment
{"level":20,"time":1746218290567,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30586] No internal notes found."}
{"level":20,"time":1746218290567,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30586] Notes match between DB and ShipStation."}
{"level":20,"time":1746218290568,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30586] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218290568,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] Preparing extraction..."}
{"level":10,"time":1746218290568,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] Input Data JSON:\\n{\n  \"orderId\": 30586,\n  \"orderNumber\": \"02-13030-24343\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Red\\nText: Kayden \\nChester\",\n  \"items\": [\n    {\n      \"itemId\": 57133,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_3\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Red\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218290568,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218290568,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30586,\\n  \\\"orderNumber\\\": \\\"02-13030-24343\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Red\\\\nText: Kayden \\\\nChester\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57133,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_3\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Red\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218300597,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] Call response status: 200 (10029ms)."}
{"level":20,"time":1746218300598,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57133\":{\"personalizations\":[{\"customText\":\"Kayden Chester\",\"color1\":\"Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218300598,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57133\":{\"personalizations\":[{\"customText\":\"Kayden Chester\",\"color1\":\"Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218300598,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] Parsed JSON response."}
{"level":30,"time":1746218300599,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30586] AI response validated."}
{"level":20,"time":1746218300669,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30586][Item 57133] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30586][Item 57133] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30586][Item 57133] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Kayden Chester","msg":"Comparing custom_text"}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"db":null,"target":"Red","msg":"Comparing color_1"}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30586,"itemId":57133,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218300670,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30586][Item 57133][Task 2151] Updating task with: {\"custom_text\":\"Kayden Chester\",\"color_1\":\"Red\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218300763,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30586][Item 57133] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Kayden Chester\"},{\"name\":\"Colour 1\",\"value\":\"Red\"}]"}
{"level":30,"time":1746218300809,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30586] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218300809,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30586] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270936739
[API] Fetched single order 02-13030-24343 (ID: 270936739). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 270936739 …
[ShipStation API] Sending payload: {
  "orderId": 270936739,
  "orderNumber": "02-13030-24343",
  "orderKey": "02-13030-24343",
  "orderDate": "2025-04-30T10:21:09.0000000",
  "createDate": "2025-04-30T10:55:44.8500000",
  "modifyDate": "2025-04-30T10:55:48.6330000",
  "paymentDate": "2025-04-30T10:21:11.0470000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128668780,
  "customerUsername": "anahuh.lfkl3gv",
  "customerEmail": "3ea853f2e1c67f921a73@members.ebay.com",
  "billTo": {
    "name": "Annette Huxtable",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07957717933",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Annette Huxtable",
    "company": "",
    "street1": "18",
    "street2": "Swale road ebaybhrfmb9",
    "street3": null,
    "city": "Brough",
    "state": "Humberside",
    "postalCode": "Hu151gg",
    "country": "GB",
    "phone": "07957717933",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386183239,
      "lineItemKey": "10071882109802",
      "sku": "wi_395107128418_3",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Kayden Chester"
        },
        {
          "name": "Colour 1",
          "value": "Red"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T10:55:44.82",
      "modifyDate": "2025-04-30T10:55:44.82"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Red\nText: Kayden \nChester",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nKayden Chester (Red)\nDB Task Update 2025-05-02T20:38:21.541Z -> 10071882109802(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Kayden Chester (Red)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 270936739.
{"level":30,"time":1746218302709,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30586] Successfully updated items: 10071882109802(AI)"}
{"level":30,"time":1746218302709,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30587 (15-13013-59478) ---"}
{"level":20,"time":1746218302710,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30587] Fetching latest data from ShipStation (ID: 270936743)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270936743
[API] Fetched single order 15-13013-59478 (ID: 270936743). Status: awaiting_shipment
{"level":20,"time":1746218303399,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30587] No internal notes found."}
{"level":20,"time":1746218303399,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30587] Notes match between DB and ShipStation."}
{"level":20,"time":1746218303399,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30587] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218303400,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] Preparing extraction..."}
{"level":10,"time":1746218303400,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] Input Data JSON:\\n{\n  \"orderId\": 30587,\n  \"orderNumber\": \"15-13013-59478\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Red\\nText: LousBikeLock\",\n  \"items\": [\n    {\n      \"itemId\": 57134,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_3\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Red\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218303400,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218303400,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30587,\\n  \\\"orderNumber\\\": \\\"15-13013-59478\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Red\\\\nText: LousBikeLock\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57134,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_3\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Red\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218310354,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] Call response status: 200 (6954ms)."}
{"level":20,"time":1746218310357,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57134\":{\"personalizations\":[{\"customText\":\"LousBikeLock\",\"color1\":\"Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218310357,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57134\":{\"personalizations\":[{\"customText\":\"LousBikeLock\",\"color1\":\"Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218310357,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] Parsed JSON response."}
{"level":30,"time":1746218310358,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30587] AI response validated."}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30587][Item 57134] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30587][Item 57134] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30587][Item 57134] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"db":"Placeholder - Review Needed","target":"LousBikeLock","msg":"Comparing custom_text"}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"db":null,"target":"Red","msg":"Comparing color_1"}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218310376,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30587,"itemId":57134,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218310377,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30587][Item 57134][Task 2150] Updating task with: {\"custom_text\":\"LousBikeLock\",\"color_1\":\"Red\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218310441,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30587][Item 57134] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"LousBikeLock\"},{\"name\":\"Colour 1\",\"value\":\"Red\"}]"}
{"level":30,"time":1746218310486,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30587] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218310486,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30587] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270936743
[API] Fetched single order 15-13013-59478 (ID: 270936743). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 270936743 …
[ShipStation API] Sending payload: {
  "orderId": 270936743,
  "orderNumber": "15-13013-59478",
  "orderKey": "15-13013-59478",
  "orderDate": "2025-04-30T10:47:34.0000000",
  "createDate": "2025-04-30T10:55:46.0870000",
  "modifyDate": "2025-04-30T10:55:48.6330000",
  "paymentDate": "2025-04-30T10:47:34.0500000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128147655,
  "customerUsername": "tkelloggs",
  "customerEmail": "0fa24f223e1e6bce9940@members.ebay.com",
  "billTo": {
    "name": "Tony Kelly",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07725947583",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Tony Kelly",
    "company": "",
    "street1": "34 School Drive",
    "street2": "ebayqhp3cp5",
    "street3": null,
    "city": "Lymm",
    "state": "Warrington",
    "postalCode": "WA139UR",
    "country": "GB",
    "phone": "07725947583",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386183242,
      "lineItemKey": "10072051291315",
      "sku": "wi_395107128418_3",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "LousBikeLock"
        },
        {
          "name": "Colour 1",
          "value": "Red"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T10:55:46.053",
      "modifyDate": "2025-04-30T10:55:46.053"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Red\nText: LousBikeLock",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nLousBikeLock (Red)\nDB Task Update 2025-05-02T20:38:31.200Z -> 10072051291315(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "LousBikeLock (Red)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 270936743.
{"level":30,"time":1746218312189,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30587] Successfully updated items: 10072051291315(AI)"}
{"level":30,"time":1746218312189,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30590 (05-13026-97205) ---"}
{"level":20,"time":1746218312189,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30590] Fetching latest data from ShipStation (ID: 270955825)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270955825
[API] Fetched single order 05-13026-97205 (ID: 270955825). Status: awaiting_shipment
{"level":20,"time":1746218312924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30590] No internal notes found."}
{"level":20,"time":1746218312924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30590] Notes match between DB and ShipStation."}
{"level":20,"time":1746218312924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30590] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218312924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] Preparing extraction..."}
{"level":10,"time":1746218312924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] Input Data JSON:\\n{\n  \"orderId\": 30590,\n  \"orderNumber\": \"05-13026-97205\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Pine Green\\nText: can the keyring just say SPAM in all capital letters please? THANK YOU!\",\n  \"items\": [\n    {\n      \"itemId\": 57161,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_10\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Pine Green\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218312924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218312924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30590,\\n  \\\"orderNumber\\\": \\\"05-13026-97205\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Pine Green\\\\nText: can the keyring just say SPAM in all capital letters please? THANK YOU!\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57161,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_10\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Pine Green\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218325384,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] Call response status: 200 (12460ms)."}
{"level":20,"time":1746218325387,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57161\":{\"personalizations\":[{\"customText\":\"SPAM\",\"color1\":\"Pine Green\",\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"CUSTOM_TEXT_UPPERCASE\",\"annotation\":\"Explicit all caps request\"}],\"overallNeedsReview\":true,\"overallReviewReason\":\"CUSTOM_TEXT_UPPERCASE\"}}}"}
{"level":30,"time":1746218325387,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57161\":{\"personalizations\":[{\"customText\":\"SPAM\",\"color1\":\"Pine Green\",\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"CUSTOM_TEXT_UPPERCASE\",\"annotation\":\"Explicit all caps request\"}],\"overallNeedsReview\":true,\"overallReviewReason\":\"CUSTOM_TEXT_UPPERCASE\"}}}"}
{"level":20,"time":1746218325387,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] Parsed JSON response."}
{"level":30,"time":1746218325388,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30590] AI response validated."}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30590][Item 57161] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30590][Item 57161] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30590][Item 57161] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"db":"Placeholder - Review Needed","target":"SPAM","msg":"Comparing custom_text"}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"db":null,"target":"Pine Green","msg":"Comparing color_1"}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"db":true,"target":true,"msg":"Comparing needs_review"}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"db":"No AI data for item","target":"CUSTOM_TEXT_UPPERCASE","msg":"Comparing review_reason"}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":"Explicit all caps request","msg":"Comparing annotation"}
{"level":20,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30590,"itemId":57161,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218325425,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30590][Item 57161][Task 2156] Updating task with: {\"custom_text\":\"SPAM\",\"color_1\":\"Pine Green\",\"review_reason\":\"CUSTOM_TEXT_UPPERCASE\",\"annotation\":\"Explicit all caps request\"}"}
{"level":20,"time":1746218325508,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30590][Item 57161] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"SPAM\"},{\"name\":\"Colour 1\",\"value\":\"Pine Green\"}]"}
{"level":30,"time":1746218325530,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30590] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218325530,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30590] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/270955825
[API] Fetched single order 05-13026-97205 (ID: 270955825). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 270955825 …
[ShipStation API] Sending payload: {
  "orderId": 270955825,
  "orderNumber": "05-13026-97205",
  "orderKey": "05-13026-97205",
  "orderDate": "2025-04-30T11:42:28.0000000",
  "createDate": "2025-04-30T11:56:42.5630000",
  "modifyDate": "2025-04-30T11:56:44.9730000",
  "paymentDate": "2025-04-30T11:42:28.3630000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128674277,
  "customerUsername": "noctus100",
  "customerEmail": "7d51381cdfe5c4643b34@members.ebay.com",
  "billTo": {
    "name": "Paul Attwood",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07939598850",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Paul Attwood",
    "company": "",
    "street1": "25 Beckway Road,",
    "street2": "ebayehqy7bn",
    "street3": null,
    "city": "London",
    "state": "London",
    "postalCode": "Sw16 4hb",
    "country": "GB",
    "phone": "07939598850",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386206349,
      "lineItemKey": "10071822574305",
      "sku": "wi_395107128418_10",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "SPAM"
        },
        {
          "name": "Colour 1",
          "value": "Pine Green"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T11:56:42.54",
      "modifyDate": "2025-04-30T11:56:42.54"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Pine Green\nText: can the keyring just say SPAM in all capital letters please? THANK YOU!",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nSPAM (Pine Green)\nDB Task Update 2025-05-02T20:38:46.278Z -> 10071822574305(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "SPAM (Pine Green)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 270955825.
{"level":30,"time":1746218327384,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30590] Successfully updated items: 10071822574305(AI)"}
{"level":30,"time":1746218327384,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30593 (23-13004-28200) ---"}
{"level":20,"time":1746218327384,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30593] Fetching latest data from ShipStation (ID: 271005741)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271005741
[API] Fetched single order 23-13004-28200 (ID: 271005741). Status: awaiting_shipment
{"level":20,"time":1746218328000,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30593] No internal notes found."}
{"level":20,"time":1746218328000,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30593] Notes match between DB and ShipStation."}
{"level":20,"time":1746218328000,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30593] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218328001,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] Preparing extraction..."}
{"level":10,"time":1746218328001,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] Input Data JSON:\\n{\n  \"orderId\": 30593,\n  \"orderNumber\": \"23-13004-28200\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395174421578 Variation: Color=Blue\\nText: DON’T LEAVE IN CAR!!\",\n  \"items\": [\n    {\n      \"itemId\": 57200,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-GIAPER-BLU-DSE7-15-Y3D\",\n      \"productName\": \"Giant Personalized Keyring | Huge Keyring | Big Keyring |  Toilet Keyring\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Blue\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218328001,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218328001,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30593,\\n  \\\"orderNumber\\\": \\\"23-13004-28200\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395174421578 Variation: Color=Blue\\\\nText: DON’T LEAVE IN CAR!!\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57200,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-GIAPER-BLU-DSE7-15-Y3D\\\",\\n      \\\"productName\\\": \\\"Giant Personalized Keyring | Huge Keyring | Big Keyring |  Toilet Keyring\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Blue\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218337173,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] Call response status: 200 (9172ms)."}
{"level":20,"time":1746218337174,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57200\":{\"personalizations\":[{\"customText\":\"Don’t Leave In Car!!\",\"color1\":\"Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218337174,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57200\":{\"personalizations\":[{\"customText\":\"Don’t Leave In Car!!\",\"color1\":\"Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218337174,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] Parsed JSON response."}
{"level":30,"time":1746218337175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30593] AI response validated."}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30593][Item 57200] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30593][Item 57200] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30593][Item 57200] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Don’t Leave In Car!!","msg":"Comparing custom_text"}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"db":null,"target":"Blue","msg":"Comparing color_1"}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30593,"itemId":57200,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218337193,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30593][Item 57200][Task 2163] Updating task with: {\"custom_text\":\"Don’t Leave In Car!!\",\"color_1\":\"Blue\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218337255,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30593][Item 57200] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Don’t Leave In Car!!\"},{\"name\":\"Colour 1\",\"value\":\"Blue\"}]"}
{"level":30,"time":1746218337276,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30593] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218337277,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30593] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271005741
[API] Fetched single order 23-13004-28200 (ID: 271005741). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271005741 …
[ShipStation API] Sending payload: {
  "orderId": 271005741,
  "orderNumber": "23-13004-28200",
  "orderKey": "23-13004-28200",
  "orderDate": "2025-04-30T14:14:45.0000000",
  "createDate": "2025-04-30T15:02:16.6070000",
  "modifyDate": "2025-04-30T15:02:22.8170000",
  "paymentDate": "2025-04-30T14:14:46.1030000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128695312,
  "customerUsername": "royston_29th",
  "customerEmail": "3ea92f05f2b95fa99a13@members.ebay.com",
  "billTo": {
    "name": "Simon Royston",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": null,
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Simon Royston",
    "company": "",
    "street1": "9 Maycroft Gardens",
    "street2": "ebayzhmr6c4",
    "street3": null,
    "city": "Grays",
    "state": "Essex",
    "postalCode": "RM17 6BH",
    "country": "GB",
    "phone": "",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386275239,
      "lineItemKey": "10071823353823",
      "sku": "PER-GIAPER-BLU-DSE7-15-Y3D",
      "name": "Giant Personalized Keyring Custom 3D Printed Gift Unique",
      "imageUrl": "https://i.ebayimg.com/images/g/oPwAAeSwgUtnw8go/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 3.49,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Don’t Leave In Car!!"
        },
        {
          "name": "Colour 1",
          "value": "Blue"
        }
      ],
      "productId": 17365430,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T15:02:16.59",
      "modifyDate": "2025-04-30T15:02:16.59"
    }
  ],
  "orderTotal": 3.49,
  "amountPaid": 3.49,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395174421578 Variation: Color=Blue\nText: DON’T LEAVE IN CAR!!",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nDon’t Leave In Car!! (Blue)\nDB Task Update 2025-05-02T20:38:57.963Z -> 10071823353823(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Don’t Leave In Car!! (Blue)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271005741.
{"level":30,"time":1746218339087,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30593] Successfully updated items: 10071823353823(AI)"}
{"level":30,"time":1746218339087,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30594 (04-13028-30997) ---"}
{"level":20,"time":1746218339087,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30594] Fetching latest data from ShipStation (ID: 271005749)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271005749
[API] Fetched single order 04-13028-30997 (ID: 271005749). Status: awaiting_shipment
{"level":20,"time":1746218339855,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30594] No internal notes found."}
{"level":20,"time":1746218339855,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30594] Notes match between DB and ShipStation."}
{"level":20,"time":1746218339855,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30594] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218339855,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] Preparing extraction..."}
{"level":10,"time":1746218339855,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] Input Data JSON:\\n{\n  \"orderId\": 30594,\n  \"orderNumber\": \"04-13028-30997\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Black\\nText: Keyring 1-  Adeen\\nKeyring 2- Kaisan\",\n  \"items\": [\n    {\n      \"itemId\": 57201,\n      \"quantityOrdered\": 2,\n      \"productSku\": \"wi_395107128418_0\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Black\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218339856,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218339856,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30594,\\n  \\\"orderNumber\\\": \\\"04-13028-30997\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Black\\\\nText: Keyring 1-  Adeen\\\\nKeyring 2- Kaisan\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57201,\\n      \\\"quantityOrdered\\\": 2,\\n      \\\"productSku\\\": \\\"wi_395107128418_0\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Black\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218347411,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] Call response status: 200 (7555ms)."}
{"level":20,"time":1746218347412,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57201\":{\"personalizations\":[{\"customText\":\"Adeen\",\"color1\":\"Black\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null},{\"customText\":\"Kaisan\",\"color1\":\"Black\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218347412,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57201\":{\"personalizations\":[{\"customText\":\"Adeen\",\"color1\":\"Black\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null},{\"customText\":\"Kaisan\",\"color1\":\"Black\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218347413,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] Parsed JSON response."}
{"level":30,"time":1746218347413,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30594] AI response validated."}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30594][Item 57201] Comparing 1 DB tasks with 2 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30594][Item 57201] Found placeholder tasks but couldn't find data in internal notes"}
{"level":40,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30594][Item 57201] AI suggests more tasks (2) than exist (1). Updating existing and creating new."}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Adeen","msg":"Comparing custom_text"}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"db":null,"target":"Black","msg":"Comparing color_1"}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"db":2,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30594,"itemId":57201,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218347469,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30594][Item 57201][Task 2162] Updating task with: {\"custom_text\":\"Adeen\",\"color_1\":\"Black\",\"quantity\":1,\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":30,"time":1746218347731,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30594][Item 57201] Creating new task (index 1) with data: {\"order\":{\"connect\":{\"id\":30594}},\"orderItem\":{\"connect\":{\"id\":57201}},\"product\":{\"connect\":{\"id\":119}},\"taskIndex\":1,\"shorthandProductName\":\"1-Colour\",\"customer\":{\"connect\":{\"id\":25754}},\"quantity\":1,\"custom_text\":\"Kaisan\",\"color_1\":\"Black\",\"color_2\":null,\"ship_by_date\":\"2025-05-07T22:59:59.000Z\",\"needs_review\":false,\"review_reason\":null,\"status\":\"pending\",\"marketplace_order_number\":\"04-13028-30997\",\"annotation\":\"Created by update script due to AI split\"}"}
{"level":20,"time":1746218347962,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30594][Item 57201] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Adeen\"},{\"name\":\"Colour 1\",\"value\":\"Black\"}]"}
{"level":30,"time":1746218347988,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30594] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218347988,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30594] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271005749
[API] Fetched single order 04-13028-30997 (ID: 271005749). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271005749 …
[ShipStation API] Sending payload: {
  "orderId": 271005749,
  "orderNumber": "04-13028-30997",
  "orderKey": "04-13028-30997",
  "orderDate": "2025-04-30T14:14:47.0000000",
  "createDate": "2025-04-30T15:02:17.9230000",
  "modifyDate": "2025-04-30T15:02:22.8170000",
  "paymentDate": "2025-04-30T14:14:50.7430000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128695310,
  "customerUsername": "dilshanbegu-0",
  "customerEmail": "1f54953334c6dd8e4a29@members.ebay.com",
  "billTo": {
    "name": "Dilshana Begum",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07752268329",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Dilshana Begum",
    "company": "",
    "street1": "85 Cross Flatts Street",
    "street2": "ebaydhr5pf6",
    "street3": null,
    "city": "leeds",
    "state": "West Yorkshire",
    "postalCode": "ls11 7jj",
    "country": "GB",
    "phone": "07752268329",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386275245,
      "lineItemKey": "10072176282704",
      "sku": "wi_395107128418_0",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 2,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Adeen"
        },
        {
          "name": "Colour 1",
          "value": "Black"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T15:02:17.89",
      "modifyDate": "2025-04-30T15:02:17.89"
    }
  ],
  "orderTotal": 3.98,
  "amountPaid": 3.78,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Black\nText: Keyring 1-  Adeen\nKeyring 2- Kaisan",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nAdeen (Black)\nDB Task Update 2025-05-02T20:39:08.790Z -> 10072176282704(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 20,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Adeen (Black)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271005749.
{"level":30,"time":1746218349929,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30594] Successfully updated items: 10072176282704(AI)"}
{"level":30,"time":1746218349929,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30595 (04-13028-44936) ---"}
{"level":20,"time":1746218349930,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30595] Fetching latest data from ShipStation (ID: 271005755)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271005755
[API] Fetched single order 04-13028-44936 (ID: 271005755). Status: awaiting_shipment
{"level":20,"time":1746218350701,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30595] No internal notes found."}
{"level":20,"time":1746218350701,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30595] Notes match between DB and ShipStation."}
{"level":20,"time":1746218350701,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30595] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218350701,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] Preparing extraction..."}
{"level":10,"time":1746218350701,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] Input Data JSON:\\n{\n  \"orderId\": 30595,\n  \"orderNumber\": \"04-13028-44936\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395174421578 Variation: Color=Light Blue\\nText: Shed key\",\n  \"items\": [\n    {\n      \"itemId\": 57202,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-GIAPER-LIG-DSE7-14-Y3D\",\n      \"productName\": \"Lg Personalized Text Keyring\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Light Blue\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218350701,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218350701,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30595,\\n  \\\"orderNumber\\\": \\\"04-13028-44936\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395174421578 Variation: Color=Light Blue\\\\nText: Shed key\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57202,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-GIAPER-LIG-DSE7-14-Y3D\\\",\\n      \\\"productName\\\": \\\"Lg Personalized Text Keyring\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Light Blue\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218357326,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] Call response status: 200 (6624ms)."}
{"level":20,"time":1746218357327,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"57202\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Shed Key\",\n          \"color1\": \"Light Blue\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":30,"time":1746218357327,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"57202\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Shed Key\",\n          \"color1\": \"Light Blue\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":20,"time":1746218357327,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] Parsed JSON response."}
{"level":30,"time":1746218357328,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30595] AI response validated."}
{"level":20,"time":1746218357344,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30595][Item 57202] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218357344,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30595][Item 57202] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218357344,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30595][Item 57202] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218357344,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Shed Key","msg":"Comparing custom_text"}
{"level":20,"time":1746218357344,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"db":null,"target":"Light Blue","msg":"Comparing color_1"}
{"level":20,"time":1746218357344,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218357345,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218357345,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218357345,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218357345,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218357345,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30595,"itemId":57202,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218357345,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30595][Item 57202][Task 2161] Updating task with: {\"custom_text\":\"Shed Key\",\"color_1\":\"Light Blue\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218357408,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30595][Item 57202] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Shed Key\"},{\"name\":\"Colour 1\",\"value\":\"Light Blue\"}]"}
{"level":30,"time":1746218357433,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30595] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218357433,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30595] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271005755
[API] Fetched single order 04-13028-44936 (ID: 271005755). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271005755 …
[ShipStation API] Sending payload: {
  "orderId": 271005755,
  "orderNumber": "04-13028-44936",
  "orderKey": "04-13028-44936",
  "orderDate": "2025-04-30T14:53:45.0000000",
  "createDate": "2025-04-30T15:02:19.1900000",
  "modifyDate": "2025-04-30T15:02:22.8170000",
  "paymentDate": "2025-04-30T14:53:44.9570000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128695311,
  "customerUsername": "maok5056",
  "customerEmail": "1f54a9989308c587dd76@members.ebay.com",
  "billTo": {
    "name": "Maria O Kane",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07835589198",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Maria O Kane",
    "company": "",
    "street1": "1A KYLEMORE Gardens",
    "street2": "ebaydhr68yt",
    "street3": null,
    "city": "Omagh",
    "state": "Tyrone",
    "postalCode": "BT79 7LL",
    "country": "GB",
    "phone": "07835589198",
    "residential": false,
    "addressVerified": "Address validation failed"
  },
  "items": [
    {
      "orderItemId": 386275251,
      "lineItemKey": "10072177066504",
      "sku": "PER-GIAPER-LIG-DSE7-14-Y3D",
      "name": "Giant Personalized Keyring Custom 3D Printed Gift Unique",
      "imageUrl": "https://i.ebayimg.com/images/g/oPwAAeSwgUtnw8go/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 3.49,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Shed Key"
        },
        {
          "name": "Colour 1",
          "value": "Light Blue"
        }
      ],
      "productId": 17365430,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T15:02:19.173",
      "modifyDate": "2025-04-30T15:02:19.173"
    }
  ],
  "orderTotal": 3.49,
  "amountPaid": 3.49,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395174421578 Variation: Color=Light Blue\nText: Shed key",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nShed Key (Light Blue)\nDB Task Update 2025-05-02T20:39:17.994Z -> 10072177066504(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": [
      {
        "customsItemId": 111449578,
        "description": "Giant Personalized Keyring Custom 3D Printed Gift Unique",
        "quantity": 1,
        "value": 3.49,
        "harmonizedTariffCode": "",
        "countryOfOrigin": "GB"
      }
    ],
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Shed Key (Light Blue)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271005755.
{"level":30,"time":1746218359146,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30595] Successfully updated items: 10072177066504(AI)"}
{"level":30,"time":1746218359146,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30597 (04-13028-46438) ---"}
{"level":20,"time":1746218359146,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30597] Fetching latest data from ShipStation (ID: 271019848)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271019848
[API] Fetched single order 04-13028-46438 (ID: 271019848). Status: awaiting_shipment
{"level":20,"time":1746218359824,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30597] No internal notes found."}
{"level":20,"time":1746218359824,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30597] Notes match between DB and ShipStation."}
{"level":20,"time":1746218359824,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30597] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218359824,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] Preparing extraction..."}
{"level":10,"time":1746218359824,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] Input Data JSON:\\n{\n  \"orderId\": 30597,\n  \"orderNumber\": \"04-13028-46438\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Fire Engine Red\\nText: Alexander\\nItem ID: 395107128418 Variation: Color=Purple\\nText: Oliwier\",\n  \"items\": [\n    {\n      \"itemId\": 57397,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_19\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Fire Engine Red\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 57398,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_12\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Purple\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218359824,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218359824,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30597,\\n  \\\"orderNumber\\\": \\\"04-13028-46438\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Fire Engine Red\\\\nText: Alexander\\\\nItem ID: 395107128418 Variation: Color=Purple\\\\nText: Oliwier\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 57397,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_19\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Fire Engine Red\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 57398,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_12\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Purple\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218368299,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] Call response status: 200 (8475ms)."}
{"level":20,"time":1746218368299,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57397\":{\"personalizations\":[{\"customText\":\"Alexander\",\"color1\":\"Fire Engine Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null},\"57398\":{\"personalizations\":[{\"customText\":\"Oliwier\",\"color1\":\"Purple\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218368299,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"57397\":{\"personalizations\":[{\"customText\":\"Alexander\",\"color1\":\"Fire Engine Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null},\"57398\":{\"personalizations\":[{\"customText\":\"Oliwier\",\"color1\":\"Purple\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218368300,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] Parsed JSON response."}
{"level":30,"time":1746218368300,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30597] AI response validated."}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57397] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30597][Item 57397] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57397] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Alexander","msg":"Comparing custom_text"}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"db":null,"target":"Fire Engine Red","msg":"Comparing color_1"}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218368355,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57397,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218368356,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57397][Task 2164] Updating task with: {\"custom_text\":\"Alexander\",\"color_1\":\"Fire Engine Red\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218368427,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57397] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Alexander\"},{\"name\":\"Colour 1\",\"value\":\"Fire Engine Red\"}]"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57398] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30597][Item 57398] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57398] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Oliwier","msg":"Comparing custom_text"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"db":null,"target":"Purple","msg":"Comparing color_1"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30597,"itemId":57398,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218368428,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57398][Task 2165] Updating task with: {\"custom_text\":\"Oliwier\",\"color_1\":\"Purple\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218368501,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30597][Item 57398] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Oliwier\"},{\"name\":\"Colour 1\",\"value\":\"Purple\"}]"}
{"level":30,"time":1746218368533,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30597] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218368533,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30597] Attempting to update 2 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271019848
[API] Fetched single order 04-13028-46438 (ID: 271019848). Status: awaiting_shipment
[ShipStation API] Batch‑updating 2 items in order 271019848 …
[ShipStation API] Sending payload: {
  "orderId": 271019848,
  "orderNumber": "04-13028-46438",
  "orderKey": "04-13028-46438",
  "orderDate": "2025-04-30T15:02:27.0000000",
  "createDate": "2025-04-30T16:03:34.5030000",
  "modifyDate": "2025-04-30T16:03:36.8500000",
  "paymentDate": "2025-04-30T15:02:27.7730000",
  "shipByDate": "2025-05-07T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128699824,
  "customerUsername": "labella_labella",
  "customerEmail": "1f54ac0bd7a26992bd51@members.ebay.com",
  "billTo": {
    "name": "Izabella Denis",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07983247500",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Izabella Denis",
    "company": "",
    "street1": "204 Farrant Avenue",
    "street2": "ebaydhr6brm",
    "street3": null,
    "city": "London",
    "state": "London",
    "postalCode": "N22 6PG",
    "country": "GB",
    "phone": "07983247500",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386295365,
      "lineItemKey": "10072177149104",
      "sku": "wi_395107128418_19",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Alexander"
        },
        {
          "name": "Colour 1",
          "value": "Fire Engine Red"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T16:03:34.47",
      "modifyDate": "2025-04-30T16:03:34.47"
    },
    {
      "orderItemId": 386295366,
      "lineItemKey": "10072177149204",
      "sku": "wi_395107128418_12",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Oliwier"
        },
        {
          "name": "Colour 1",
          "value": "Purple"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-04-30T16:03:34.47",
      "modifyDate": "2025-04-30T16:03:34.47"
    }
  ],
  "orderTotal": 3.98,
  "amountPaid": 3.78,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Fire Engine Red\nText: Alexander\nItem ID: 395107128418 Variation: Color=Purple\nText: Oliwier",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 2 items\nAlexander (Fire Engine Red)\nOliwier (Purple)\nDB Task Update 2025-05-02T20:39:29.323Z -> 10072177149104(AI), 10072177149204(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 20,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271019848.
{"level":30,"time":1746218370456,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30597] Successfully updated items: 10072177149104(AI), 10072177149204(AI)"}
{"level":30,"time":1746218370456,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30601 (14-13017-08187) ---"}
{"level":20,"time":1746218370456,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30601] Fetching latest data from ShipStation (ID: 271131721)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271131721
[API] Fetched single order 14-13017-08187 (ID: 271131721). Status: awaiting_shipment
{"level":20,"time":1746218371153,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30601] No internal notes found."}
{"level":20,"time":1746218371153,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30601] Notes match between DB and ShipStation."}
{"level":20,"time":1746218371153,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30601] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218371154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] Preparing extraction..."}
{"level":10,"time":1746218371154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] Input Data JSON:\\n{\n  \"orderId\": 30601,\n  \"orderNumber\": \"14-13017-08187\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Random Selection\\nText: Lucy\\nRebekah \",\n  \"items\": [\n    {\n      \"itemId\": 58808,\n      \"quantityOrdered\": 2,\n      \"productSku\": \"wi_395107128418_23\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Random Selection\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218371154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218371154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30601,\\n  \\\"orderNumber\\\": \\\"14-13017-08187\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Random Selection\\\\nText: Lucy\\\\nRebekah \\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 58808,\\n      \\\"quantityOrdered\\\": 2,\\n      \\\"productSku\\\": \\\"wi_395107128418_23\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Random Selection\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218381942,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] Call response status: 200 (10787ms)."}
{"level":20,"time":1746218381944,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"58808\":{\"personalizations\":[{\"customText\":\"Lucy\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"Customer requested random color\",\"annotation\":null},{\"customText\":\"Rebekah\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"Customer requested random color\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"Customer requested random color\"}}}"}
{"level":30,"time":1746218381944,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"58808\":{\"personalizations\":[{\"customText\":\"Lucy\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"Customer requested random color\",\"annotation\":null},{\"customText\":\"Rebekah\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"Customer requested random color\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"Customer requested random color\"}}}"}
{"level":20,"time":1746218381944,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] Parsed JSON response."}
{"level":30,"time":1746218381944,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30601] AI response validated."}
{"level":20,"time":1746218381969,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30601][Item 58808] Comparing 1 DB tasks with 2 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218381969,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30601][Item 58808] Found placeholder tasks but couldn't find data in internal notes"}
{"level":40,"time":1746218381969,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30601][Item 58808] AI suggests more tasks (2) than exist (1). Updating existing and creating new."}
{"level":20,"time":1746218381969,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Lucy","msg":"Comparing custom_text"}
{"level":20,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_1"}
{"level":20,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"db":2,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"db":true,"target":true,"msg":"Comparing needs_review"}
{"level":20,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"db":"No AI data for item","target":"Customer requested random color","msg":"Comparing review_reason"}
{"level":20,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30601,"itemId":58808,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218381970,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30601][Item 58808][Task 2171] Updating task with: {\"custom_text\":\"Lucy\",\"quantity\":1,\"review_reason\":\"Customer requested random color\",\"annotation\":null}"}
{"level":30,"time":1746218382143,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30601][Item 58808] Creating new task (index 1) with data: {\"order\":{\"connect\":{\"id\":30601}},\"orderItem\":{\"connect\":{\"id\":58808}},\"product\":{\"connect\":{\"id\":129}},\"taskIndex\":1,\"shorthandProductName\":\"1-Colour\",\"customer\":{\"connect\":{\"id\":25761}},\"quantity\":1,\"custom_text\":\"Rebekah\",\"color_1\":null,\"color_2\":null,\"ship_by_date\":\"2025-05-08T22:59:59.000Z\",\"needs_review\":true,\"review_reason\":\"Customer requested random color\",\"status\":\"pending\",\"marketplace_order_number\":\"14-13017-08187\",\"annotation\":\"Created by update script due to AI split\"}"}
{"level":20,"time":1746218382331,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30601][Item 58808] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Lucy\"}]"}
{"level":30,"time":1746218382359,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30601] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218382359,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30601] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271131721
[API] Fetched single order 14-13017-08187 (ID: 271131721). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271131721 …
[ShipStation API] Sending payload: {
  "orderId": 271131721,
  "orderNumber": "14-13017-08187",
  "orderKey": "14-13017-08187",
  "orderDate": "2025-05-01T00:39:35.0000000",
  "createDate": "2025-05-01T01:16:23.1200000",
  "modifyDate": "2025-05-01T01:16:26.6030000",
  "paymentDate": "2025-05-01T00:39:35.7030000",
  "shipByDate": "2025-05-08T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128739408,
  "customerUsername": "bevjc1955",
  "customerEmail": "7d56e98238253c959b11@members.ebay.com",
  "billTo": {
    "name": "BEVERLEY CARROLL",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "01430471337",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "BEVERLEY CARROLL",
    "company": "",
    "street1": "53, Water Lane",
    "street2": "South Cave ebayphpknbl",
    "street3": null,
    "city": "Brough",
    "state": "East Riding of Yorkshire",
    "postalCode": "Hu15 2hh",
    "country": "GB",
    "phone": "01430471337",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386460504,
      "lineItemKey": "10072060741414",
      "sku": "wi_395107128418_23",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 2,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Lucy"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T01:16:23.09",
      "modifyDate": "2025-05-01T01:16:23.09"
    }
  ],
  "orderTotal": 3.98,
  "amountPaid": 3.78,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Random Selection\nText: Lucy\nRebekah ",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nLucy\nDB Task Update 2025-05-02T20:39:42.937Z -> 10072060741414(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 20,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Lucy",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271131721.
{"level":30,"time":1746218384049,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30601] Successfully updated items: 10072060741414(AI)"}
{"level":30,"time":1746218384049,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30605 (202-8785622-5669910) ---"}
{"level":20,"time":1746218384049,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30605] Fetching latest data from ShipStation (ID: 271159197)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271159197
[API] Fetched single order 202-8785622-5669910 (ID: 271159197). Status: awaiting_shipment
{"level":20,"time":1746218384749,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30605] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nBella (Light Blue)\nTask sync 2025-05-01T09:32:51.238Z -> 48734676493802(AmazonURL)...\""}
{"level":20,"time":1746218384749,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30605] Notes match between DB and ShipStation."}
{"level":20,"time":1746218384749,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 1 items"}
{"level":30,"time":1746218384749,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Bella\", Color1=\"Light Blue\", Color2=\"None\""}
{"level":20,"time":1746218384749,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30605] Extracted 1 personalizations from internal notes."}
{"level":20,"time":1746218384749,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] Preparing extraction..."}
{"level":10,"time":1746218384749,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] Input Data JSON:\\n{\n  \"orderId\": 30605,\n  \"orderNumber\": \"202-8785622-5669910\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59030,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY1-Y3D\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Bella\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Light Blue\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218384750,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218384750,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30605,\\n  \\\"orderNumber\\\": \\\"202-8785622-5669910\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59030,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY1-Y3D\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Bella\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Light Blue\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218393993,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] Call response status: 200 (9243ms)."}
{"level":20,"time":1746218393994,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59030\":{\"personalizations\":[{\"customText\":\"Bella\",\"color1\":\"Light Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218393994,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59030\":{\"personalizations\":[{\"customText\":\"Bella\",\"color1\":\"Light Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218393994,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] Parsed JSON response."}
{"level":30,"time":1746218393994,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30605] AI response validated."}
{"level":30,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30605][Item 59030] Using personalization from internal notes: \"Bella\""}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30605][Item 59030] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30605][Item 59030] 🔄 RECOVERING DATA from internal notes: \"Bella\" with colors: Light Blue / None"}
{"level":30,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30605][Item 59030] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Bella","msg":"Comparing custom_text"}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"db":null,"target":"Light Blue","msg":"Comparing color_1"}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218394051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30605,"itemId":59030,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218394052,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30605][Item 59030][Task 2179] Updating task with: {\"custom_text\":\"Bella\",\"color_1\":\"Light Blue\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218394126,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30605][Item 59030] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Bella\"},{\"name\":\"Colour 1\",\"value\":\"Light Blue\"}]"}
{"level":30,"time":1746218394150,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30605] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218394150,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30605] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271159197
[API] Fetched single order 202-8785622-5669910 (ID: 271159197). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271159197 …
[ShipStation API] Sending payload: {
  "orderId": 271159197,
  "orderNumber": "202-8785622-5669910",
  "orderKey": "202-8785622-5669910",
  "orderDate": "2025-05-01T00:46:28.0000000",
  "createDate": "2025-05-01T02:28:18.0170000",
  "modifyDate": "2025-05-01T02:32:51.5800000",
  "paymentDate": "2025-05-01T00:46:28.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128745333,
  "customerUsername": "zwrgpvmk21jthx4@marketplace.amazon.co.uk",
  "customerEmail": "zwrgpvmk21jthx4@marketplace.amazon.co.uk",
  "billTo": {
    "name": "Nichola Johnson-Marshall",
    "company": null,
    "street1": "20 MARTINDALE",
    "street2": "",
    "street3": "",
    "city": "LONDON",
    "state": "",
    "postalCode": "SW14 7AL",
    "country": "GB",
    "phone": "07799 110125",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Calli Louis",
    "company": "",
    "street1": "20 MARTINDALE",
    "street2": "",
    "street3": "",
    "city": "LONDON",
    "state": "",
    "postalCode": "SW14 7AL",
    "country": "GB",
    "phone": "07799 110125",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386496221,
      "lineItemKey": "48734676493802",
      "sku": "PER-KEY3D-STY1-Y3D",
      "name": "1-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/717lvEQK4EL.jpg",
      "weight": {
        "value": 32,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.49,
      "taxAmount": 0.67,
      "shippingAmount": 1.49,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Bella"
        },
        {
          "name": "Colour 1",
          "value": "Light Blue"
        }
      ],
      "productId": 13724060,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T02:32:51.58",
      "modifyDate": "2025-05-01T02:32:51.58"
    }
  ],
  "orderTotal": 4.65,
  "amountPaid": 3.98,
  "taxAmount": 0.67,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nBella (Light Blue)\nTask sync 2025-05-01T09:32:51.238Z -> 48734676493802(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nDB Task Update 2025-05-02T20:39:54.809Z -> 48734676493802(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": "Other",
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "amazon_shipping",
  "serviceCode": "amazon_rm_crl48_ltr",
  "packageCode": "package",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 32,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 25,
    "width": 16,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "Bella (Light Blue)",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 163397
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271159197.
{"level":30,"time":1746218395851,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30605] Successfully updated items: 48734676493802(AI)"}
{"level":30,"time":1746218395851,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30606 (18-13012-19781) ---"}
{"level":20,"time":1746218395851,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30606] Fetching latest data from ShipStation (ID: 271159166)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271159166
[API] Fetched single order 18-13012-19781 (ID: 271159166). Status: awaiting_shipment
{"level":20,"time":1746218396570,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30606] No internal notes found."}
{"level":20,"time":1746218396570,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30606] Notes match between DB and ShipStation."}
{"level":20,"time":1746218396570,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30606] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218396570,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] Preparing extraction..."}
{"level":10,"time":1746218396570,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] Input Data JSON:\\n{\n  \"orderId\": 30606,\n  \"orderNumber\": \"18-13012-19781\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Light Blue\\nText: Daddy\",\n  \"items\": [\n    {\n      \"itemId\": 59031,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_6\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Light Blue\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218396570,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218396570,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30606,\\n  \\\"orderNumber\\\": \\\"18-13012-19781\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Light Blue\\\\nText: Daddy\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59031,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_6\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Light Blue\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218401065,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] Call response status: 200 (4495ms)."}
{"level":20,"time":1746218401066,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59031\":{\"personalizations\":[{\"customText\":\"Daddy\",\"color1\":\"Light Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218401066,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59031\":{\"personalizations\":[{\"customText\":\"Daddy\",\"color1\":\"Light Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218401066,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] Parsed JSON response."}
{"level":30,"time":1746218401066,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30606] AI response validated."}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30606][Item 59031] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30606][Item 59031] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30606][Item 59031] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Daddy","msg":"Comparing custom_text"}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"db":null,"target":"Light Blue","msg":"Comparing color_1"}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30606,"itemId":59031,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218401079,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30606][Item 59031][Task 2177] Updating task with: {\"custom_text\":\"Daddy\",\"color_1\":\"Light Blue\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218401142,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30606][Item 59031] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Daddy\"},{\"name\":\"Colour 1\",\"value\":\"Light Blue\"}]"}
{"level":30,"time":1746218401163,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30606] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218401164,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30606] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271159166
[API] Fetched single order 18-13012-19781 (ID: 271159166). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271159166 …
[ShipStation API] Sending payload: {
  "orderId": 271159166,
  "orderNumber": "18-13012-19781",
  "orderKey": "18-13012-19781",
  "orderDate": "2025-05-01T01:40:01.0000000",
  "createDate": "2025-05-01T02:28:01.0400000",
  "modifyDate": "2025-05-01T02:28:04.5570000",
  "paymentDate": "2025-05-01T01:40:02.7670000",
  "shipByDate": "2025-05-08T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 127714791,
  "customerUsername": "lizmor_9060",
  "customerEmail": "07cd9d7d7a432ac39a69@members.ebay.com",
  "billTo": {
    "name": "Lizzie Morgan",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07749110900",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Lizzie Morgan",
    "company": "",
    "street1": "30 Heritage Court",
    "street2": "ebaythnvmkz",
    "street3": null,
    "city": "Merthyr Tydfil",
    "state": "Merthyr Tydfil",
    "postalCode": "CF47 9AQ",
    "country": "GB",
    "phone": "07749110900",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386494524,
      "lineItemKey": "10075069120518",
      "sku": "wi_395107128418_6",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Daddy"
        },
        {
          "name": "Colour 1",
          "value": "Light Blue"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T02:28:01.007",
      "modifyDate": "2025-05-01T02:28:01.007"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Light Blue\nText: Daddy",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nDaddy (Light Blue)\nDB Task Update 2025-05-02T20:40:01.868Z -> 10075069120518(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Daddy (Light Blue)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271159166.
{"level":30,"time":1746218402924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30606] Successfully updated items: 10075069120518(AI)"}
{"level":30,"time":1746218402924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30610 (205-4997414-2060356) ---"}
{"level":20,"time":1746218402924,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610] Fetching latest data from ShipStation (ID: 271194345)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271194345
[API] Fetched single order 205-4997414-2060356 (ID: 271194345). Status: awaiting_shipment
{"level":20,"time":1746218403852,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 5 items\nAmelia (Red)\nAmelia (Fire Engine Red / White)\nCora (Fire Engine Red / White)\nCora (White)\nAmeli...\""}
{"level":20,"time":1746218403852,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610] Notes match between DB and ShipStation."}
{"level":20,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 5 items"}
{"level":30,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Amelia\", Color1=\"Red\", Color2=\"None\""}
{"level":30,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Amelia\", Color1=\"Fire Engine Red\", Color2=\"White\""}
{"level":30,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Cora\", Color1=\"Fire Engine Red\", Color2=\"White\""}
{"level":30,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Cora\", Color1=\"White\", Color2=\"None\""}
{"level":30,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Amelia\", Color1=\"White\", Color2=\"None\""}
{"level":20,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610] Extracted 5 personalizations from internal notes."}
{"level":20,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] Preparing extraction..."}
{"level":10,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] Input Data JSON:\\n{\n  \"orderId\": 30610,\n  \"orderNumber\": \"205-4997414-2060356\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59438,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY1-Y3D\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Amelia\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Red\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59439,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Amelia\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Fire Engine Red\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"White\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59440,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Cora\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Fire Engine Red\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"White\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59441,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY1-Y3D\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Cora\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"White\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59442,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY1-Y3D\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Amelia\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"White\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218403853,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30610,\\n  \\\"orderNumber\\\": \\\"205-4997414-2060356\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59438,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY1-Y3D\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Amelia\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Red\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59439,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Amelia\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Fire Engine Red\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"White\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59440,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Cora\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Fire Engine Red\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"White\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59441,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY1-Y3D\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Cora\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"White\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59442,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY1-Y3D\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Amelia\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"White\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218410881,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] Call response status: 200 (7027ms)."}
{"level":20,"time":1746218410882,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"59438\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Amelia\",\n          \"color1\": \"Red\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59439\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Amelia\",\n          \"color1\": \"Fire Engine Red\",\n          \"color2\": \"White\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59440\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Cora\",\n          \"color1\": \"Fire Engine Red\",\n          \"color2\": \"White\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59441\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Cora\",\n          \"color1\": \"White\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59442\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Amelia\",\n          \"color1\": \"White\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":30,"time":1746218410882,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"59438\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Amelia\",\n          \"color1\": \"Red\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59439\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Amelia\",\n          \"color1\": \"Fire Engine Red\",\n          \"color2\": \"White\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59440\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Cora\",\n          \"color1\": \"Fire Engine Red\",\n          \"color2\": \"White\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59441\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Cora\",\n          \"color1\": \"White\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59442\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Amelia\",\n          \"color1\": \"White\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":20,"time":1746218410882,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] Parsed JSON response."}
{"level":30,"time":1746218410882,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30610] AI response validated."}
{"level":40,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59438, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59438] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59438] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59438] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59438] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Amelia","msg":"Comparing custom_text"}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"db":null,"target":"Red","msg":"Comparing color_1"}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59438,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218410923,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59438][Task 2191] Updating task with: {\"custom_text\":\"Amelia\",\"color_1\":\"Red\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218410997,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59438] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Amelia\"},{\"name\":\"Colour 1\",\"value\":\"Red\"}]"}
{"level":40,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59439, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59439] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59439] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59439] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59439] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Amelia","msg":"Comparing custom_text"}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"db":null,"target":"Fire Engine Red","msg":"Comparing color_1"}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"db":null,"target":"White","msg":"Comparing color_2"}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59439,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218410998,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59439][Task 2192] Updating task with: {\"custom_text\":\"Amelia\",\"color_1\":\"Fire Engine Red\",\"color_2\":\"White\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218411107,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59439] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Amelia\"},{\"name\":\"Colour 1\",\"value\":\"Fire Engine Red\"},{\"name\":\"Colour 2\",\"value\":\"White\"}]"}
{"level":40,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59440, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59440] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59440] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59440] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59440] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Cora","msg":"Comparing custom_text"}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"db":null,"target":"Fire Engine Red","msg":"Comparing color_1"}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"db":null,"target":"White","msg":"Comparing color_2"}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59440,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218411108,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59440][Task 2193] Updating task with: {\"custom_text\":\"Cora\",\"color_1\":\"Fire Engine Red\",\"color_2\":\"White\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59440] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Cora\"},{\"name\":\"Colour 1\",\"value\":\"Fire Engine Red\"},{\"name\":\"Colour 2\",\"value\":\"White\"}]"}
{"level":40,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59441, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59441] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59441] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59441] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59441] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Cora","msg":"Comparing custom_text"}
{"level":20,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"db":null,"target":"White","msg":"Comparing color_1"}
{"level":20,"time":1746218411180,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218411181,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218411181,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218411181,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218411181,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218411181,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59441,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218411181,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59441][Task 2194] Updating task with: {\"custom_text\":\"Cora\",\"color_1\":\"White\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59441] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Cora\"},{\"name\":\"Colour 1\",\"value\":\"White\"}]"}
{"level":40,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59442, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59442] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59442] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610][Item 59442] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59442] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Amelia","msg":"Comparing custom_text"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"db":null,"target":"White","msg":"Comparing color_1"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30610,"itemId":59442,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218411271,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59442][Task 2195] Updating task with: {\"custom_text\":\"Amelia\",\"color_1\":\"White\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218411342,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30610][Item 59442] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Amelia\"},{\"name\":\"Colour 1\",\"value\":\"White\"}]"}
{"level":30,"time":1746218411365,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30610] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218411365,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30610] Attempting to update 5 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271194345
[API] Fetched single order 205-4997414-2060356 (ID: 271194345). Status: awaiting_shipment
[ShipStation API] Batch‑updating 5 items in order 271194345 …
[ShipStation API] Sending payload: {
  "orderId": 271194345,
  "orderNumber": "205-4997414-2060356",
  "orderKey": "205-4997414-2060356",
  "orderDate": "2025-05-01T03:31:37.0000000",
  "createDate": "2025-05-01T04:37:51.7470000",
  "modifyDate": "2025-05-01T04:43:52.4570000",
  "paymentDate": "2025-05-01T03:31:37.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128767906,
  "customerUsername": "mks56nssl8rw1fn@marketplace.amazon.co.uk",
  "customerEmail": "mks56nssl8rw1fn@marketplace.amazon.co.uk",
  "billTo": {
    "name": "Terri Glew",
    "company": null,
    "street1": "59 HIBBERT ROAD",
    "street2": "",
    "street3": "",
    "city": "BARROW-IN-FURNESS",
    "state": "Cumbria",
    "postalCode": "LA14 5AF",
    "country": "GB",
    "phone": "07737992943",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Terri Cullen",
    "company": "",
    "street1": "59 HIBBERT ROAD",
    "street2": "",
    "street3": "",
    "city": "BARROW-IN-FURNESS",
    "state": "Cumbria",
    "postalCode": "LA14 5AF",
    "country": "GB",
    "phone": "07737992943",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386545595,
      "lineItemKey": "48738454657922",
      "sku": "PER-KEY3D-STY1-Y3D",
      "name": "1-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/717lvEQK4EL.jpg",
      "weight": {
        "value": 32,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.49,
      "taxAmount": 0.47,
      "shippingAmount": 0.3,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Amelia"
        },
        {
          "name": "Colour 1",
          "value": "Red"
        }
      ],
      "productId": 13724060,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:43:52.457",
      "modifyDate": "2025-05-01T04:43:52.457"
    },
    {
      "orderItemId": 386545596,
      "lineItemKey": "48738454657802",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/61lfDSnScAL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.55,
      "shippingAmount": 0.29,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Amelia"
        },
        {
          "name": "Colour 1",
          "value": "Fire Engine Red"
        },
        {
          "name": "Colour 2",
          "value": "White"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:43:52.457",
      "modifyDate": "2025-05-01T04:43:52.457"
    },
    {
      "orderItemId": 386545597,
      "lineItemKey": "48738454657842",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/61lfDSnScAL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.55,
      "shippingAmount": 0.3,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Cora"
        },
        {
          "name": "Colour 1",
          "value": "Fire Engine Red"
        },
        {
          "name": "Colour 2",
          "value": "White"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:43:52.457",
      "modifyDate": "2025-05-01T04:43:52.457"
    },
    {
      "orderItemId": 386545598,
      "lineItemKey": "48738454657762",
      "sku": "PER-KEY3D-STY1-Y3D",
      "name": "1-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/717lvEQK4EL.jpg",
      "weight": {
        "value": 32,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.49,
      "taxAmount": 0.47,
      "shippingAmount": 0.3,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Cora"
        },
        {
          "name": "Colour 1",
          "value": "White"
        }
      ],
      "productId": 13724060,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:43:52.457",
      "modifyDate": "2025-05-01T04:43:52.457"
    },
    {
      "orderItemId": 386545599,
      "lineItemKey": "48738454657882",
      "sku": "PER-KEY3D-STY1-Y3D",
      "name": "1-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/717lvEQK4EL.jpg",
      "weight": {
        "value": 32,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.49,
      "taxAmount": 0.47,
      "shippingAmount": 0.3,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Amelia"
        },
        {
          "name": "Colour 1",
          "value": "White"
        }
      ],
      "productId": 13724060,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:43:52.457",
      "modifyDate": "2025-05-01T04:43:52.457"
    }
  ],
  "orderTotal": 17.45,
  "amountPaid": 14.94,
  "taxAmount": 2.51,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 5 items\nAmelia (Red)\nAmelia (Fire Engine Red / White)\nCora (Fire Engine Red / White)\nCora (White)\nAmelia (White)\nTask sync 2025-05-01T11:43:51.718Z -> 48738454657922(AmazonURL), 48738454657802(AmazonURL), 48738454657842(AmazonURL), 48738454657762(AmazonURL), 48738454657882(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nAmelia (Red)\nAmelia (Fire Engine Red / White)\nCora (Fire Engine Red / White)\nCora (White)\nAmelia (White)\nDB Task Update 2025-05-02T20:40:12.086Z -> 48738454657922(AI), 48738454657802(AI), 48738454657842(AI), 48738454657762(AI), 48738454657882(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": "Other",
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "amazon_shipping",
  "serviceCode": "amazon_rm_t48_ltr",
  "packageCode": "package",
  "confirmation": "delivery",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 148,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 9.05,
    "width": 6.69,
    "height": 0.78
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 163397
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271194345.
{"level":30,"time":1746218413743,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30610] Successfully updated items: 48738454657922(AI), 48738454657802(AI), 48738454657842(AI), 48738454657762(AI), 48738454657882(AI)"}
{"level":30,"time":1746218413743,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30611 (206-3878205-3552327) ---"}
{"level":20,"time":1746218413743,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30611] Fetching latest data from ShipStation (ID: 271194349)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271194349
[API] Fetched single order 206-3878205-3552327 (ID: 271194349). Status: awaiting_shipment
{"level":20,"time":1746218414499,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30611] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nIsla-Rose Ryan  (Purple / Pink)\nTask sync 2025-05-01T11:44:05.270Z -> 48738723894522(AmazonURL)...\""}
{"level":20,"time":1746218414499,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30611] Notes match between DB and ShipStation."}
{"level":20,"time":1746218414499,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 1 items"}
{"level":30,"time":1746218414500,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Isla-Rose Ryan\", Color1=\"Purple\", Color2=\"Pink\""}
{"level":20,"time":1746218414500,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30611] Extracted 1 personalizations from internal notes."}
{"level":20,"time":1746218414500,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] Preparing extraction..."}
{"level":10,"time":1746218414500,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] Input Data JSON:\\n{\n  \"orderId\": 30611,\n  \"orderNumber\": \"206-3878205-3552327\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59443,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Isla-Rose Ryan \"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Purple\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"Pink\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218414500,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218414500,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30611,\\n  \\\"orderNumber\\\": \\\"206-3878205-3552327\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59443,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Isla-Rose Ryan \\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Purple\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"Pink\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218420587,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] Call response status: 200 (6087ms)."}
{"level":20,"time":1746218420588,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59443\":{\"personalizations\":[{\"customText\":\"Isla-Rose Ryan\",\"color1\":\"Purple\",\"color2\":\"Pink\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218420588,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59443\":{\"personalizations\":[{\"customText\":\"Isla-Rose Ryan\",\"color1\":\"Purple\",\"color2\":\"Pink\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218420588,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] Parsed JSON response."}
{"level":30,"time":1746218420588,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30611] AI response validated."}
{"level":30,"time":1746218420608,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30611][Item 59443] Using personalization from internal notes: \"Isla-Rose Ryan\""}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30611][Item 59443] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30611][Item 59443] 🔄 RECOVERING DATA from internal notes: \"Isla-Rose Ryan\" with colors: Purple / Pink"}
{"level":30,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30611][Item 59443] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Isla-Rose Ryan","msg":"Comparing custom_text"}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"db":null,"target":"Purple","msg":"Comparing color_1"}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"db":null,"target":"Pink","msg":"Comparing color_2"}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30611,"itemId":59443,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218420609,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30611][Item 59443][Task 2196] Updating task with: {\"custom_text\":\"Isla-Rose Ryan\",\"color_1\":\"Purple\",\"color_2\":\"Pink\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218420664,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30611][Item 59443] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Isla-Rose Ryan\"},{\"name\":\"Colour 1\",\"value\":\"Purple\"},{\"name\":\"Colour 2\",\"value\":\"Pink\"}]"}
{"level":30,"time":1746218420695,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30611] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218420695,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30611] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271194349
[API] Fetched single order 206-3878205-3552327 (ID: 271194349). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271194349 …
[ShipStation API] Sending payload: {
  "orderId": 271194349,
  "orderNumber": "206-3878205-3552327",
  "orderKey": "206-3878205-3552327",
  "orderDate": "2025-05-01T03:29:29.0000000",
  "createDate": "2025-05-01T04:37:52.3600000",
  "modifyDate": "2025-05-01T04:44:05.8970000",
  "paymentDate": "2025-05-01T03:29:29.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128767905,
  "customerUsername": "0r8s0k41sqf7klc@marketplace.amazon.co.uk",
  "customerEmail": "0r8s0k41sqf7klc@marketplace.amazon.co.uk",
  "billTo": {
    "name": "chloe",
    "company": null,
    "street1": "45",
    "street2": "JEPHSON ROAD",
    "street3": "",
    "city": "SUTTON-IN-ASHFIELD",
    "state": "",
    "postalCode": "NG17 5EH",
    "country": "GB",
    "phone": "07803477722",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Jenny varley",
    "company": "",
    "street1": "45",
    "street2": "JEPHSON ROAD",
    "street3": "",
    "city": "SUTTON-IN-ASHFIELD",
    "state": "",
    "postalCode": "NG17 5EH",
    "country": "GB",
    "phone": "07803477722",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386545714,
      "lineItemKey": "48738723894522",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/61lfDSnScAL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.75,
      "shippingAmount": 1.49,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Isla-Rose Ryan"
        },
        {
          "name": "Colour 1",
          "value": "Purple"
        },
        {
          "name": "Colour 2",
          "value": "Pink"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:44:05.897",
      "modifyDate": "2025-05-01T04:44:05.897"
    }
  ],
  "orderTotal": 5.23,
  "amountPaid": 4.48,
  "taxAmount": 0.75,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nIsla-Rose Ryan  (Purple / Pink)\nTask sync 2025-05-01T11:44:05.270Z -> 48738723894522(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nIsla-Rose Ryan (Purple / Pink)\nDB Task Update 2025-05-02T20:40:21.274Z -> 48738723894522(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": "Other",
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "amazon_shipping",
  "serviceCode": "amazon_rm_crl48_ltr",
  "packageCode": "package",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 26,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 26,
    "width": 16,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "Isla-Rose Ryan (Purple / Pink)",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 163397
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271194349.
{"level":30,"time":1746218422553,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30611] Successfully updated items: 48738723894522(AI)"}
{"level":30,"time":1746218422554,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30612 (026-4659564-0633144) ---"}
{"level":20,"time":1746218422554,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612] Fetching latest data from ShipStation (ID: 271194353)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271194353
[API] Fetched single order 026-4659564-0633144 (ID: 271194353). Status: awaiting_shipment
{"level":20,"time":1746218423229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 2 items\nAvery (Yellow / Bone White)\nGriffin (Peak Green / Bone White)\nTask sync 2025-05-01T11:44:30.216...\""}
{"level":20,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612] Notes match between DB and ShipStation."}
{"level":20,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 2 items"}
{"level":30,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Avery\", Color1=\"Yellow\", Color2=\"Bone White\""}
{"level":30,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Griffin\", Color1=\"Peak Green\", Color2=\"Bone White\""}
{"level":20,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612] Extracted 2 personalizations from internal notes."}
{"level":20,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] Preparing extraction..."}
{"level":10,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] Input Data JSON:\\n{\n  \"orderId\": 30612,\n  \"orderNumber\": \"026-4659564-0633144\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59444,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Avery\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Yellow\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"Bone White\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59445,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Griffin\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Peak Green\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"Bone White\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218423230,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30612,\\n  \\\"orderNumber\\\": \\\"026-4659564-0633144\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59444,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Avery\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Yellow\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"Bone White\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59445,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Griffin\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Peak Green\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"Bone White\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218431253,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] Call response status: 200 (8023ms)."}
{"level":20,"time":1746218431254,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59444\":{\"personalizations\":[{\"customText\":\"Avery\",\"color1\":\"Yellow\",\"color2\":\"Bone White\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null},\"59445\":{\"personalizations\":[{\"customText\":\"Griffin\",\"color1\":\"Peak Green\",\"color2\":\"Bone White\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218431254,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59444\":{\"personalizations\":[{\"customText\":\"Avery\",\"color1\":\"Yellow\",\"color2\":\"Bone White\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null},\"59445\":{\"personalizations\":[{\"customText\":\"Griffin\",\"color1\":\"Peak Green\",\"color2\":\"Bone White\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218431254,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] Parsed JSON response."}
{"level":30,"time":1746218431255,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30612] AI response validated."}
{"level":40,"time":1746218431340,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59444, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218431340,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612][Item 59444] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59444] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612][Item 59444] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59444] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Avery","msg":"Comparing custom_text"}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"db":null,"target":"Yellow","msg":"Comparing color_1"}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"db":null,"target":"Bone White","msg":"Comparing color_2"}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59444,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218431341,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59444][Task 2198] Updating task with: {\"custom_text\":\"Avery\",\"color_1\":\"Yellow\",\"color_2\":\"Bone White\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59444] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Avery\"},{\"name\":\"Colour 1\",\"value\":\"Yellow\"},{\"name\":\"Colour 2\",\"value\":\"Bone White\"}]"}
{"level":40,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59445, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612][Item 59445] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59445] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612][Item 59445] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59445] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Griffin","msg":"Comparing custom_text"}
{"level":20,"time":1746218431472,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"db":null,"target":"Peak Green","msg":"Comparing color_1"}
{"level":20,"time":1746218431473,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"db":null,"target":"Bone White","msg":"Comparing color_2"}
{"level":20,"time":1746218431473,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218431473,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218431473,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218431473,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218431473,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30612,"itemId":59445,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218431473,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59445][Task 2199] Updating task with: {\"custom_text\":\"Griffin\",\"color_1\":\"Peak Green\",\"color_2\":\"Bone White\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218431564,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30612][Item 59445] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Griffin\"},{\"name\":\"Colour 1\",\"value\":\"Peak Green\"},{\"name\":\"Colour 2\",\"value\":\"Bone White\"}]"}
{"level":30,"time":1746218431586,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30612] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218431586,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30612] Attempting to update 2 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271194353
[API] Fetched single order 026-4659564-0633144 (ID: 271194353). Status: awaiting_shipment
[ShipStation API] Batch‑updating 2 items in order 271194353 …
[ShipStation API] Sending payload: {
  "orderId": 271194353,
  "orderNumber": "026-4659564-0633144",
  "orderKey": "026-4659564-0633144",
  "orderDate": "2025-05-01T03:19:15.0000000",
  "createDate": "2025-05-01T04:37:52.8770000",
  "modifyDate": "2025-05-01T04:44:30.8370000",
  "paymentDate": "2025-05-01T03:19:15.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128767904,
  "customerUsername": "d8wfpd0vvy510yn@marketplace.amazon.co.uk",
  "customerEmail": "d8wfpd0vvy510yn@marketplace.amazon.co.uk",
  "billTo": {
    "name": "Jack Burford",
    "company": null,
    "street1": "ALPINE LODGE",
    "street2": "SCHOOL ROAD",
    "street3": "",
    "city": "RUARDEAN",
    "state": "",
    "postalCode": "GL17 9WW",
    "country": "GB",
    "phone": "+447964460538",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Jack Burford",
    "company": "",
    "street1": "ALPINE LODGE",
    "street2": "SCHOOL ROAD",
    "street3": "",
    "city": "RUARDEAN",
    "state": "",
    "postalCode": "GL17 9WW",
    "country": "GB",
    "phone": "+447964460538",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386545905,
      "lineItemKey": "48737545913242",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/61lfDSnScAL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.63,
      "shippingAmount": 0.75,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Avery"
        },
        {
          "name": "Colour 1",
          "value": "Yellow"
        },
        {
          "name": "Colour 2",
          "value": "Bone White"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:44:30.837",
      "modifyDate": "2025-05-01T04:44:30.837"
    },
    {
      "orderItemId": 386545906,
      "lineItemKey": "48737545913202",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/61lfDSnScAL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.62,
      "shippingAmount": 0.74,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Griffin"
        },
        {
          "name": "Colour 1",
          "value": "Peak Green"
        },
        {
          "name": "Colour 2",
          "value": "Bone White"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T04:44:30.837",
      "modifyDate": "2025-05-01T04:44:30.837"
    }
  ],
  "orderTotal": 8.72,
  "amountPaid": 7.47,
  "taxAmount": 1.25,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 2 items\nAvery (Yellow / Bone White)\nGriffin (Peak Green / Bone White)\nTask sync 2025-05-01T11:44:30.216Z -> 48737545913242(AmazonURL), 48737545913202(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nAvery (Yellow / Bone White)\nGriffin (Peak Green / Bone White)\nDB Task Update 2025-05-02T20:40:32.241Z -> 48737545913242(AI), 48737545913202(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": "Other",
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "amazon_shipping",
  "serviceCode": "amazon_rm_crl48_ltr",
  "packageCode": "package",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 52,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 9.05,
    "width": 6.69,
    "height": 0.78
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 163397
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271194353.
{"level":30,"time":1746218433373,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30612] Successfully updated items: 48737545913242(AI), 48737545913202(AI)"}
{"level":30,"time":1746218433373,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30613 (205-1890147-2343539) ---"}
{"level":20,"time":1746218433373,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30613] Fetching latest data from ShipStation (ID: 271200518)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271200518
[API] Fetched single order 205-1890147-2343539 (ID: 271200518). Status: awaiting_shipment
{"level":20,"time":1746218433946,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30613] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nLucie (Magenta / Purple)\nTask sync 2025-05-01T12:05:12.157Z -> 48739729235962(AmazonURL)...\""}
{"level":20,"time":1746218433946,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30613] Notes match between DB and ShipStation."}
{"level":20,"time":1746218433947,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 1 items"}
{"level":30,"time":1746218433947,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Lucie\", Color1=\"Magenta\", Color2=\"Purple\""}
{"level":20,"time":1746218433947,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30613] Extracted 1 personalizations from internal notes."}
{"level":20,"time":1746218433947,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] Preparing extraction..."}
{"level":10,"time":1746218433947,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] Input Data JSON:\\n{\n  \"orderId\": 30613,\n  \"orderNumber\": \"205-1890147-2343539\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59482,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"Y3D-NKC-002\",\n      \"productName\": \"2-Colour (Bubble)\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Lucie\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Magenta\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"Purple\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218433947,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218433947,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30613,\\n  \\\"orderNumber\\\": \\\"205-1890147-2343539\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59482,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"Y3D-NKC-002\\\",\\n      \\\"productName\\\": \\\"2-Colour (Bubble)\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Lucie\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Magenta\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"Purple\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218439152,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] Call response status: 200 (5205ms)."}
{"level":20,"time":1746218439154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59482\":{\"personalizations\":[{\"customText\":\"Lucie\",\"color1\":\"Magenta\",\"color2\":\"Purple\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218439154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59482\":{\"personalizations\":[{\"customText\":\"Lucie\",\"color1\":\"Magenta\",\"color2\":\"Purple\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218439154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] Parsed JSON response."}
{"level":30,"time":1746218439154,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30613] AI response validated."}
{"level":30,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30613][Item 59482] Using personalization from internal notes: \"Lucie\""}
{"level":20,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30613][Item 59482] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30613][Item 59482] 🔄 RECOVERING DATA from internal notes: \"Lucie\" with colors: Magenta / Purple"}
{"level":30,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30613][Item 59482] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Lucie","msg":"Comparing custom_text"}
{"level":20,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"db":null,"target":"Magenta","msg":"Comparing color_1"}
{"level":20,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"db":null,"target":"Purple","msg":"Comparing color_2"}
{"level":20,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218439175,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218439176,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218439176,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218439176,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30613,"itemId":59482,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218439176,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30613][Item 59482][Task 2200] Updating task with: {\"custom_text\":\"Lucie\",\"color_1\":\"Magenta\",\"color_2\":\"Purple\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218439249,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30613][Item 59482] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Lucie\"},{\"name\":\"Colour 1\",\"value\":\"Magenta\"},{\"name\":\"Colour 2\",\"value\":\"Purple\"}]"}
{"level":30,"time":1746218439278,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30613] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218439278,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30613] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271200518
[API] Fetched single order 205-1890147-2343539 (ID: 271200518). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271200518 …
[ShipStation API] Sending payload: {
  "orderId": 271200518,
  "orderNumber": "205-1890147-2343539",
  "orderKey": "205-1890147-2343539",
  "orderDate": "2025-05-01T04:26:32.0000000",
  "createDate": "2025-05-01T04:59:02.0930000",
  "modifyDate": "2025-05-01T05:05:12.9270000",
  "paymentDate": "2025-05-01T04:26:32.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128769726,
  "customerUsername": "8rtm1q396qqrs2q@marketplace.amazon.co.uk",
  "customerEmail": "8rtm1q396qqrs2q@marketplace.amazon.co.uk",
  "billTo": {
    "name": "Ceri",
    "company": null,
    "street1": "GREAT BRITHDIR",
    "street2": "OLD CHURCH STOKE",
    "street3": "",
    "city": "MONTGOMERY",
    "state": "Powys",
    "postalCode": "SY15 6EH",
    "country": "GB",
    "phone": "07972120627",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Ceri Jayne Pugh",
    "company": "",
    "street1": "GREAT BRITHDIR",
    "street2": "OLD CHURCH STOKE",
    "street3": "",
    "city": "MONTGOMERY",
    "state": "Powys",
    "postalCode": "SY15 6EH",
    "country": "GB",
    "phone": "07972120627",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386553701,
      "lineItemKey": "48739729235962",
      "sku": "Y3D-NKC-002",
      "name": "Personalised Keyring - Custom 3D Name Tag with 24 Colours for Kids' Bags & Party Favours | Unique Personalised Gifts for Kids | 2-Colour Design Keychain for School Bags & Stocking Fillers",
      "imageUrl": "https://m.media-amazon.com/images/I/71d-C+pYGQL.jpg",
      "weight": {
        "value": 0.7,
        "units": "ounces",
        "WeightUnits": 1
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.75,
      "shippingAmount": 1.49,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Lucie"
        },
        {
          "name": "Colour 1",
          "value": "Magenta"
        },
        {
          "name": "Colour 2",
          "value": "Purple"
        }
      ],
      "productId": 17595914,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T05:05:12.927",
      "modifyDate": "2025-05-01T05:05:12.927"
    }
  ],
  "orderTotal": 5.23,
  "amountPaid": 4.48,
  "taxAmount": 0.75,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nLucie (Magenta / Purple)\nTask sync 2025-05-01T12:05:12.157Z -> 48739729235962(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nDB Task Update 2025-05-02T20:40:39.880Z -> 48739729235962(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": "Other",
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "amazon_shipping",
  "serviceCode": "amazon_rm_crl48_ltr",
  "packageCode": "package",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 19.84,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 9.05,
    "width": 6.69,
    "height": 0.78
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "Lucie (Magenta / Purple)",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 163397
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271200518.
{"level":30,"time":1746218441004,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30613] Successfully updated items: 48739729235962(AI)"}
{"level":30,"time":1746218441004,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30614 (206-3484464-1934742) ---"}
{"level":20,"time":1746218441004,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30614] Fetching latest data from ShipStation (ID: 271200038)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271200038
[API] Fetched single order 206-3484464-1934742 (ID: 271200038). Status: awaiting_shipment
{"level":20,"time":1746218441698,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30614] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nGrandpops (Blue / White)\nTask sync 2025-05-01T12:56:13.918Z -> 48739600475762(AmazonURL)...\""}
{"level":20,"time":1746218441698,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30614] Notes match between DB and ShipStation."}
{"level":20,"time":1746218441698,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 1 items"}
{"level":30,"time":1746218441699,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Grandpops\", Color1=\"Blue\", Color2=\"White\""}
{"level":20,"time":1746218441699,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30614] Extracted 1 personalizations from internal notes."}
{"level":20,"time":1746218441699,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] Preparing extraction..."}
{"level":10,"time":1746218441699,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] Input Data JSON:\\n{\n  \"orderId\": 30614,\n  \"orderNumber\": \"206-3484464-1934742\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59483,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Grandpops\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Blue\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"White\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218441699,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218441699,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30614,\\n  \\\"orderNumber\\\": \\\"206-3484464-1934742\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59483,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Grandpops\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Blue\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"White\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218449151,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] Call response status: 200 (7452ms)."}
{"level":20,"time":1746218449151,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59483\":{\"personalizations\":[{\"customText\":\"Grandpops\",\"color1\":\"Blue\",\"color2\":\"White\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218449152,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59483\":{\"personalizations\":[{\"customText\":\"Grandpops\",\"color1\":\"Blue\",\"color2\":\"White\",\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218449152,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] Parsed JSON response."}
{"level":30,"time":1746218449152,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30614] AI response validated."}
{"level":30,"time":1746218449228,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30614][Item 59483] Using personalization from internal notes: \"Grandpops\""}
{"level":20,"time":1746218449228,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30614][Item 59483] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218449228,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30614][Item 59483] 🔄 RECOVERING DATA from internal notes: \"Grandpops\" with colors: Blue / White"}
{"level":30,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30614][Item 59483] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Grandpops","msg":"Comparing custom_text"}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"db":null,"target":"Blue","msg":"Comparing color_1"}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"db":null,"target":"White","msg":"Comparing color_2"}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30614,"itemId":59483,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218449229,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30614][Item 59483][Task 2201] Updating task with: {\"custom_text\":\"Grandpops\",\"color_1\":\"Blue\",\"color_2\":\"White\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218449313,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30614][Item 59483] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Grandpops\"},{\"name\":\"Colour 1\",\"value\":\"Blue\"},{\"name\":\"Colour 2\",\"value\":\"White\"}]"}
{"level":30,"time":1746218449350,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30614] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218449351,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30614] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271200038
[API] Fetched single order 206-3484464-1934742 (ID: 271200038). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271200038 …
[ShipStation API] Sending payload: {
  "orderId": 271200038,
  "orderNumber": "206-3484464-1934742",
  "orderKey": "206-3484464-1934742",
  "orderDate": "2025-05-01T04:32:22.0000000",
  "createDate": "2025-05-01T04:56:46.9530000",
  "modifyDate": "2025-05-01T05:56:15.6100000",
  "paymentDate": "2025-05-01T04:32:22.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": null,
  "customerUsername": null,
  "customerEmail": "81p92wx8kj73c5p@marketplace.amazon.co.uk",
  "billTo": {
    "name": "Danielle Suttill",
    "company": null,
    "street1": "40",
    "street2": "PARK ROAD",
    "street3": "",
    "city": "BEDWORTH",
    "state": "",
    "postalCode": "CV12 8LF",
    "country": "GB",
    "phone": "07511079688",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Danielle Suttill",
    "company": "",
    "street1": "40",
    "street2": "PARK ROAD",
    "street3": "",
    "city": "BEDWORTH",
    "state": "",
    "postalCode": "CV12 8LF",
    "country": "GB",
    "phone": "07511079688",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386573806,
      "lineItemKey": "48739600475762",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/61lfDSnScAL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0,
      "shippingAmount": 1.49,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Grandpops"
        },
        {
          "name": "Colour 1",
          "value": "Blue"
        },
        {
          "name": "Colour 2",
          "value": "White"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T05:56:15.61",
      "modifyDate": "2025-05-01T05:56:15.61"
    }
  ],
  "orderTotal": 5.23,
  "amountPaid": 4.48,
  "taxAmount": 0.75,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nGrandpops (Blue / White)\nTask sync 2025-05-01T12:56:13.918Z -> 48739600475762(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nDB Task Update 2025-05-02T20:40:50.093Z -> 48739600475762(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_intl_business_mail_tracked_country",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 26,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 26,
    "width": 16,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": "merchandise",
    "customsItems": [
      {
        "customsItemId": 111598219,
        "description": "Plastic Personalised Keyring 3D Printed",
        "quantity": 1,
        "value": 2.99,
        "harmonizedTariffCode": "3926400000",
        "countryOfOrigin": "GB"
      }
    ],
    "nonDelivery": "return_to_sender"
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "Grandpops (Blue / White)",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271200038.
{"level":30,"time":1746218451242,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30614] Successfully updated items: 48739600475762(AI)"}
{"level":30,"time":1746218451242,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30615 (026-7019204-9116316) ---"}
{"level":20,"time":1746218451242,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615] Fetching latest data from ShipStation (ID: 271214970)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271214970
[API] Fetched single order 026-7019204-9116316 (ID: 271214970). Status: awaiting_shipment
{"level":20,"time":1746218451975,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 3 items\nElla  (Magenta / Light Blue)\nHome (Peak Green / Light Blue)\nThea (Red / Purple)\nTask sync 2025-...\""}
{"level":20,"time":1746218451975,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615] Notes match between DB and ShipStation."}
{"level":20,"time":1746218451975,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 3 items"}
{"level":30,"time":1746218451975,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Ella\", Color1=\"Magenta\", Color2=\"Light Blue\""}
{"level":30,"time":1746218451975,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Home\", Color1=\"Peak Green\", Color2=\"Light Blue\""}
{"level":30,"time":1746218451975,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Thea\", Color1=\"Red\", Color2=\"Purple\""}
{"level":20,"time":1746218451975,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615] Extracted 3 personalizations from internal notes."}
{"level":20,"time":1746218451976,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] Preparing extraction..."}
{"level":10,"time":1746218451976,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] Input Data JSON:\\n{\n  \"orderId\": 30615,\n  \"orderNumber\": \"026-7019204-9116316\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59652,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Ella \"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Magenta\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"Light Blue\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59653,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Home\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Peak Green\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"Light Blue\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59654,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Thea\"\n        },\n        {\n          \"name\": \"Colour 1\",\n          \"value\": \"Red\"\n        },\n        {\n          \"name\": \"Colour 2\",\n          \"value\": \"Purple\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218451976,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218451976,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30615,\\n  \\\"orderNumber\\\": \\\"026-7019204-9116316\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59652,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Ella \\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Magenta\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"Light Blue\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59653,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Home\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Peak Green\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"Light Blue\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59654,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Thea\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 1\\\",\\n          \\\"value\\\": \\\"Red\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"Colour 2\\\",\\n          \\\"value\\\": \\\"Purple\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218457697,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] Call response status: 200 (5721ms)."}
{"level":20,"time":1746218457697,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"59652\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Ella\",\n          \"color1\": \"Magenta\",\n          \"color2\": \"Light Blue\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59653\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Home\",\n          \"color1\": \"Peak Green\",\n          \"color2\": \"Light Blue\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59654\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Thea\",\n          \"color1\": \"Red\",\n          \"color2\": \"Purple\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":30,"time":1746218457698,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"59652\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Ella\",\n          \"color1\": \"Magenta\",\n          \"color2\": \"Light Blue\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59653\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Home\",\n          \"color1\": \"Peak Green\",\n          \"color2\": \"Light Blue\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    },\n    \"59654\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Thea\",\n          \"color1\": \"Red\",\n          \"color2\": \"Purple\",\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":20,"time":1746218457698,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] Parsed JSON response."}
{"level":30,"time":1746218457698,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30615] AI response validated."}
{"level":40,"time":1746218457754,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59652, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218457754,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615][Item 59652] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218457754,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59652] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218457754,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615][Item 59652] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59652] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Ella","msg":"Comparing custom_text"}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"db":null,"target":"Magenta","msg":"Comparing color_1"}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"db":null,"target":"Light Blue","msg":"Comparing color_2"}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59652,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218457755,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59652][Task 2208] Updating task with: {\"custom_text\":\"Ella\",\"color_1\":\"Magenta\",\"color_2\":\"Light Blue\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59652] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Ella\"},{\"name\":\"Colour 1\",\"value\":\"Magenta\"},{\"name\":\"Colour 2\",\"value\":\"Light Blue\"}]"}
{"level":40,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59653, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615][Item 59653] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59653] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615][Item 59653] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59653] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Home","msg":"Comparing custom_text"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"db":null,"target":"Peak Green","msg":"Comparing color_1"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"db":null,"target":"Light Blue","msg":"Comparing color_2"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218457888,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59653,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218457889,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59653][Task 2209] Updating task with: {\"custom_text\":\"Home\",\"color_1\":\"Peak Green\",\"color_2\":\"Light Blue\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218458038,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59653] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Home\"},{\"name\":\"Colour 1\",\"value\":\"Peak Green\"},{\"name\":\"Colour 2\",\"value\":\"Light Blue\"}]"}
{"level":40,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Multiple personalizations found for item 59654, but no clear match. Cannot reliably select one from notes alone."}
{"level":40,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615][Item 59654] Could not reliably match item to internal note personalization. AI result will be used."}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59654] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615][Item 59654] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59654] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Thea","msg":"Comparing custom_text"}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"db":null,"target":"Red","msg":"Comparing color_1"}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"db":null,"target":"Purple","msg":"Comparing color_2"}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"db":null,"target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30615,"itemId":59654,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218458039,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59654][Task 2210] Updating task with: {\"custom_text\":\"Thea\",\"color_1\":\"Red\",\"color_2\":\"Purple\",\"needs_review\":false,\"review_reason\":null}"}
{"level":20,"time":1746218458165,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30615][Item 59654] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Thea\"},{\"name\":\"Colour 1\",\"value\":\"Red\"},{\"name\":\"Colour 2\",\"value\":\"Purple\"}]"}
{"level":30,"time":1746218458198,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30615] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218458198,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30615] Attempting to update 3 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271214970
[API] Fetched single order 026-7019204-9116316 (ID: 271214970). Status: awaiting_shipment
[ShipStation API] Batch‑updating 3 items in order 271214970 …
[ShipStation API] Sending payload: {
  "orderId": 271214970,
  "orderNumber": "026-7019204-9116316",
  "orderKey": "026-7019204-9116316",
  "orderDate": "2025-05-01T05:34:53.0000000",
  "createDate": "2025-05-01T05:52:58.8730000",
  "modifyDate": "2025-05-01T07:14:48.1870000",
  "paymentDate": "2025-05-01T05:34:53.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": null,
  "customerUsername": null,
  "customerEmail": "b7hv3gtb1btnxsb@marketplace.amazon.co.uk",
  "billTo": {
    "name": "C.Armstrong",
    "company": null,
    "street1": "104 Chiltern Road",
    "street2": "Caversham",
    "street3": "",
    "city": "READING",
    "state": "Berks",
    "postalCode": "RG4 5JD",
    "country": "GB",
    "phone": "01189470138",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Cathy Armstrong",
    "company": "",
    "street1": "104 Chiltern Road",
    "street2": "Caversham",
    "street3": "",
    "city": "READING",
    "state": "Berks",
    "postalCode": "RG4 5JD",
    "country": "GB",
    "phone": "01189470138",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386601480,
      "lineItemKey": "48742038787002",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/41URdVxOwhL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0,
      "shippingAmount": 0.5,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Ella"
        },
        {
          "name": "Colour 1",
          "value": "Magenta"
        },
        {
          "name": "Colour 2",
          "value": "Light Blue"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T07:14:48.187",
      "modifyDate": "2025-05-01T07:14:48.187"
    },
    {
      "orderItemId": 386601481,
      "lineItemKey": "48742038786962",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/41URdVxOwhL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0,
      "shippingAmount": 0.5,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Home"
        },
        {
          "name": "Colour 1",
          "value": "Peak Green"
        },
        {
          "name": "Colour 2",
          "value": "Light Blue"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T07:14:48.187",
      "modifyDate": "2025-05-01T07:14:48.187"
    },
    {
      "orderItemId": 386601482,
      "lineItemKey": "48742038787042",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/41URdVxOwhL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0,
      "shippingAmount": 0.49,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Thea"
        },
        {
          "name": "Colour 1",
          "value": "Red"
        },
        {
          "name": "Colour 2",
          "value": "Purple"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T07:14:48.187",
      "modifyDate": "2025-05-01T07:14:48.187"
    }
  ],
  "orderTotal": 12.2,
  "amountPaid": 10.46,
  "taxAmount": 1.74,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 3 items\nElla  (Magenta / Light Blue)\nHome (Peak Green / Light Blue)\nThea (Red / Purple)\nTask sync 2025-05-01T14:14:47.432Z -> 48742038787002(AmazonURL), 48742038786962(AmazonURL), 48742038787042(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nElla (Magenta / Light Blue)\nHome (Peak Green / Light Blue)\nThea (Red / Purple)\nDB Task Update 2025-05-02T20:40:58.915Z -> 48742038787002(AI), 48742038786962(AI), 48742038787042(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_intl_business_mail_tracked_country",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 78,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 9.05,
    "width": 6.69,
    "height": 0.78
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": "merchandise",
    "customsItems": [
      {
        "customsItemId": 111605866,
        "description": "Plastic Personalised Keyring 3D Printed",
        "quantity": 1,
        "value": 2.99,
        "harmonizedTariffCode": "3926400000",
        "countryOfOrigin": "GB"
      },
      {
        "customsItemId": 111605867,
        "description": "Plastic Personalised Keyring 3D Printed",
        "quantity": 1,
        "value": 2.99,
        "harmonizedTariffCode": "3926400000",
        "countryOfOrigin": "GB"
      },
      {
        "customsItemId": 111605868,
        "description": "Plastic Personalised Keyring 3D Printed",
        "quantity": 1,
        "value": 2.99,
        "harmonizedTariffCode": "3926400000",
        "countryOfOrigin": "GB"
      }
    ],
    "nonDelivery": "return_to_sender"
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271214970.
{"level":30,"time":1746218460051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30615] Successfully updated items: 48742038787002(AI), 48742038786962(AI), 48742038787042(AI)"}
{"level":30,"time":1746218460051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30616 (206-1779044-9720343) ---"}
{"level":20,"time":1746218460051,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616] Fetching latest data from ShipStation (ID: 271214973)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271214973
[API] Fetched single order 206-1779044-9720343 (ID: 271214973). Status: awaiting_shipment
{"level":20,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nJessica K (Light Blue / Magenta)\nTask sync 2025-05-01T14:15:01.269Z -> 48741659823842(AmazonURL)...\""}
{"level":20,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616] Notes match between DB and ShipStation."}
{"level":20,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 1 items"}
{"level":30,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Jessica K\", Color1=\"Light Blue\", Color2=\"Magenta\""}
{"level":30,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found fallback multi-item personalization (text only): \"🌟 Y3D AI – Happy Friday!\""}
{"level":30,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found fallback multi-item personalization (text only): \"Placeholder - Review Needed\""}
{"level":40,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Expected 1 items but found 3 personalizations in notes lines"}
{"level":20,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616] Extracted 3 personalizations from internal notes."}
{"level":20,"time":1746218460764,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] Preparing extraction..."}
{"level":10,"time":1746218460765,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] Input Data JSON:\\n{\n  \"orderId\": 30616,\n  \"orderNumber\": \"206-1779044-9720343\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59655,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Placeholder - Review Needed\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218460765,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218460765,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30616,\\n  \\\"orderNumber\\\": \\\"206-1779044-9720343\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59655,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Placeholder - Review Needed\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218471798,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] Call response status: 200 (11033ms)."}
{"level":20,"time":1746218471800,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59655\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"AMBIGUOUS_PARSE\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"AMBIGUOUS_PARSE\"}}}"}
{"level":30,"time":1746218471800,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59655\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"AMBIGUOUS_PARSE\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"AMBIGUOUS_PARSE\"}}}"}
{"level":20,"time":1746218471800,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] Parsed JSON response."}
{"level":30,"time":1746218471801,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30616] AI response validated."}
{"level":30,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found matching personalization for item 59655 based on database task values"}
{"level":30,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616][Item 59655] Using personalization from internal notes: \"Placeholder - Review Needed\""}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30616][Item 59655] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616][Item 59655] 🔄 RECOVERING DATA from internal notes: \"Placeholder - Review Needed\" with colors: None / None"}
{"level":30,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616][Item 59655] Replacing AI data with recovered data from ShipStation notes"}
{"level":30,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30616][Item 59655] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Placeholder - Review Needed","msg":"Comparing custom_text"}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_1"}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"db":null,"target":"Recovered from ShipStation internal notes at 2025-05-02T20:41:11.844Z","msg":"Comparing annotation"}
{"level":20,"time":1746218471844,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30616,"itemId":59655,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218471845,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30616][Item 59655][Task 2211] Updating task with: {\"needs_review\":false,\"review_reason\":null,\"annotation\":\"Recovered from ShipStation internal notes at 2025-05-02T20:41:11.844Z\"}"}
{"level":20,"time":1746218471939,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30616][Item 59655] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Placeholder - Review Needed\"}]"}
{"level":30,"time":1746218471961,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30616] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218471961,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30616] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271214973
[API] Fetched single order 206-1779044-9720343 (ID: 271214973). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271214973 …
[ShipStation API] Sending payload: {
  "orderId": 271214973,
  "orderNumber": "206-1779044-9720343",
  "orderKey": "206-1779044-9720343",
  "orderDate": "2025-05-01T05:28:49.0000000",
  "createDate": "2025-05-01T05:52:59.2470000",
  "modifyDate": "2025-05-02T01:28:41.0400000",
  "paymentDate": "2025-05-01T05:28:49.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": null,
  "customerUsername": null,
  "customerEmail": "3t0cq4z1f1y4t8k@marketplace.amazon.co.uk",
  "billTo": {
    "name": "Lilian",
    "company": null,
    "street1": "11",
    "street2": "PENN ROAD",
    "street3": "",
    "city": "RICHMOND",
    "state": "North Yorkshire",
    "postalCode": "DL10 4BE",
    "country": "GB",
    "phone": "07490767262",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Miss Lilian Kirkham",
    "company": "",
    "street1": "11",
    "street2": "PENN ROAD",
    "street3": "",
    "city": "RICHMOND",
    "state": "North Yorkshire",
    "postalCode": "DL10 4BE",
    "country": "GB",
    "phone": "07490767262",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386899744,
      "lineItemKey": "48741659823842",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/41URdVxOwhL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.75,
      "shippingAmount": 1.49,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Placeholder - Review Needed"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-02T01:28:41.04",
      "modifyDate": "2025-05-02T01:28:41.04"
    }
  ],
  "orderTotal": 5.23,
  "amountPaid": 4.48,
  "taxAmount": 0.75,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nJessica K (Light Blue / Magenta)\nTask sync 2025-05-01T14:15:01.269Z -> 48741659823842(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nPlaceholder - Review Needed\nTask sync 2025-05-02T08:28:40.210Z -> 48741659823842\nDB Task Update 2025-05-02T20:41:12.515Z -> 48741659823842(NotesRecovery)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_intl_business_mail_tracked_country",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 26,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 26,
    "width": 16,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": "merchandise",
    "customsItems": [
      {
        "customsItemId": 111605869,
        "description": "Plastic Personalised Keyring 3D Printed",
        "quantity": 1,
        "value": 2.99,
        "harmonizedTariffCode": "3926400000",
        "countryOfOrigin": "GB"
      }
    ],
    "nonDelivery": "return_to_sender"
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "Placeholder - Review Needed",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271214973.
{"level":30,"time":1746218473692,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30616] Successfully updated items: 48741659823842(NotesRecovery)"}
{"level":30,"time":1746218473692,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30618 (202-6899009-8933913) ---"}
{"level":20,"time":1746218473692,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618] Fetching latest data from ShipStation (ID: 271235008)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271235008
[API] Fetched single order 202-6899009-8933913 (ID: 271235008). Status: awaiting_shipment
{"level":20,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 2 items\nJamie (Blue)\nNICO  (Yellow)\nTask sync 2025-05-01T14:14:17.485Z -> 48741934527962(AmazonURL), 48...\""}
{"level":20,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618] Notes match between DB and ShipStation."}
{"level":20,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 2 items"}
{"level":30,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Jamie\", Color1=\"Blue\", Color2=\"None\""}
{"level":30,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"NICO\", Color1=\"Yellow\", Color2=\"None\""}
{"level":30,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found fallback multi-item personalization (text only): \"🌟 Y3D AI – Happy Friday!\""}
{"level":30,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found fallback multi-item personalization (text only): \"Placeholder - Review Needed\""}
{"level":30,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found fallback multi-item personalization (text only): \"Placeholder - Review Needed\""}
{"level":40,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Expected 2 items but found 5 personalizations in notes lines"}
{"level":20,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618] Extracted 5 personalizations from internal notes."}
{"level":20,"time":1746218474256,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] Preparing extraction..."}
{"level":10,"time":1746218474257,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] Input Data JSON:\\n{\n  \"orderId\": 30618,\n  \"orderNumber\": \"202-6899009-8933913\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59933,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY1-Y3D\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Placeholder - Review Needed\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 59934,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY1-Y3D\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Placeholder - Review Needed\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218474257,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218474257,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30618,\\n  \\\"orderNumber\\\": \\\"202-6899009-8933913\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59933,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY1-Y3D\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Placeholder - Review Needed\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 59934,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY1-Y3D\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Placeholder - Review Needed\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218481074,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] Call response status: 200 (6817ms)."}
{"level":20,"time":1746218481075,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59933\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"UNKNOWN_COLOR\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"UNKNOWN_COLOR\"},\"59934\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"UNKNOWN_COLOR\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"UNKNOWN_COLOR\"}}}"}
{"level":30,"time":1746218481075,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59933\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"UNKNOWN_COLOR\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"UNKNOWN_COLOR\"},\"59934\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"UNKNOWN_COLOR\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"UNKNOWN_COLOR\"}}}"}
{"level":20,"time":1746218481075,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] Parsed JSON response."}
{"level":30,"time":1746218481076,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30618] AI response validated."}
{"level":30,"time":1746218481124,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found matching personalization for item 59933 based on database task values"}
{"level":30,"time":1746218481124,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618][Item 59933] Using personalization from internal notes: \"Placeholder - Review Needed\""}
{"level":20,"time":1746218481124,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59933] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218481124,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618][Item 59933] 🔄 RECOVERING DATA from internal notes: \"Placeholder - Review Needed\" with colors: None / None"}
{"level":30,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618][Item 59933] Replacing AI data with recovered data from ShipStation notes"}
{"level":30,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59933] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Placeholder - Review Needed","msg":"Comparing custom_text"}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_1"}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":"Recovered from ShipStation internal notes at 2025-05-02T20:41:21.125Z","msg":"Comparing annotation"}
{"level":20,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59933,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218481125,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59933][Task 2205] Updating task with: {\"needs_review\":false,\"review_reason\":null,\"annotation\":\"Recovered from ShipStation internal notes at 2025-05-02T20:41:21.125Z\"}"}
{"level":20,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59933] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Placeholder - Review Needed\"}]"}
{"level":30,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found matching personalization for item 59934 based on database task values"}
{"level":30,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618][Item 59934] Using personalization from internal notes: \"Placeholder - Review Needed\""}
{"level":20,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59934] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618][Item 59934] 🔄 RECOVERING DATA from internal notes: \"Placeholder - Review Needed\" with colors: None / None"}
{"level":30,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618][Item 59934] Replacing AI data with recovered data from ShipStation notes"}
{"level":30,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59934] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Placeholder - Review Needed","msg":"Comparing custom_text"}
{"level":20,"time":1746218481279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_1"}
{"level":20,"time":1746218481280,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218481280,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218481280,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218481280,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218481280,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":"Recovered from ShipStation internal notes at 2025-05-02T20:41:21.279Z","msg":"Comparing annotation"}
{"level":20,"time":1746218481280,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30618,"itemId":59934,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218481280,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59934][Task 2206] Updating task with: {\"needs_review\":false,\"review_reason\":null,\"annotation\":\"Recovered from ShipStation internal notes at 2025-05-02T20:41:21.279Z\"}"}
{"level":20,"time":1746218481424,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30618][Item 59934] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Placeholder - Review Needed\"}]"}
{"level":30,"time":1746218481478,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30618] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218481479,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30618] Attempting to update 2 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271235008
[API] Fetched single order 202-6899009-8933913 (ID: 271235008). Status: awaiting_shipment
[ShipStation API] Batch‑updating 2 items in order 271235008 …
[ShipStation API] Sending payload: {
  "orderId": 271235008,
  "orderNumber": "202-6899009-8933913",
  "orderKey": "202-6899009-8933913",
  "orderDate": "2025-05-01T06:23:21.0000000",
  "createDate": "2025-05-01T07:09:49.2500000",
  "modifyDate": "2025-05-02T01:28:33.7330000",
  "paymentDate": "2025-05-01T06:23:21.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128782315,
  "customerUsername": "w3lkjcydxfs7m3t@marketplace.amazon.co.uk",
  "customerEmail": "w3lkjcydxfs7m3t@marketplace.amazon.co.uk",
  "billTo": {
    "name": "leonor lino-da costa",
    "company": null,
    "street1": "FLAT A 119",
    "street2": "GIPSY ROAD",
    "street3": "",
    "city": "LONDON",
    "state": "London",
    "postalCode": "SE27 9QS",
    "country": "GB",
    "phone": "07941983655",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Leonor Lino-da Costa",
    "company": "",
    "street1": "FLAT A 119",
    "street2": "GIPSY ROAD",
    "street3": "",
    "city": "LONDON",
    "state": "London",
    "postalCode": "SE27 9QS",
    "country": "GB",
    "phone": "07941983655",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386899721,
      "lineItemKey": "48741137375402",
      "sku": "PER-KEY3D-STY1-Y3D",
      "name": "1-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/717lvEQK4EL.jpg",
      "weight": {
        "value": 32,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.49,
      "taxAmount": 0.54,
      "shippingAmount": 0.74,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Placeholder - Review Needed"
        }
      ],
      "productId": 13724060,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-02T01:28:33.733",
      "modifyDate": "2025-05-02T01:28:33.733"
    },
    {
      "orderItemId": 386899722,
      "lineItemKey": "48741934527962",
      "sku": "PER-KEY3D-STY1-Y3D",
      "name": "1-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/717lvEQK4EL.jpg",
      "weight": {
        "value": 32,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.49,
      "taxAmount": 0.55,
      "shippingAmount": 0.75,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Placeholder - Review Needed"
        }
      ],
      "productId": 13724060,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-02T01:28:33.733",
      "modifyDate": "2025-05-02T01:28:33.733"
    }
  ],
  "orderTotal": 7.56,
  "amountPaid": 6.47,
  "taxAmount": 1.09,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 2 items\nJamie (Blue)\nNICO  (Yellow)\nTask sync 2025-05-01T14:14:17.485Z -> 48741934527962(AmazonURL), 48741137375402(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nPlaceholder - Review Needed\nTask sync 2025-05-02T08:28:32.955Z -> 48741934527962, 48741137375402\nPlaceholder - Review Needed\nPlaceholder - Review Needed\nDB Task Update 2025-05-02T20:41:22.256Z -> 48741934527962(NotesRecovery), 48741137375402(NotesRecovery)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": "Other",
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "amazon_shipping",
  "serviceCode": "amazon_rm_crl48_ltr",
  "packageCode": "package",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 64,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 3.56,
    "width": 2.63,
    "height": 0.3
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 163397
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271235008.
{"level":30,"time":1746218483445,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30618] Successfully updated items: 48741934527962(NotesRecovery), 48741137375402(NotesRecovery)"}
{"level":30,"time":1746218483445,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30619 (202-9099631-4875535) ---"}
{"level":20,"time":1746218483445,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619] Fetching latest data from ShipStation (ID: 271235013)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271235013
[API] Fetched single order 202-9099631-4875535 (ID: 271235013). Status: awaiting_shipment
{"level":20,"time":1746218484155,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619] Internal notes found: \"🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nVinnie (Yellow / White)\nTask sync 2025-05-01T14:14:31.386Z -> 48743039460722(AmazonURL)\n🌟 Y3D A...\""}
{"level":20,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619] Notes match between DB and ShipStation."}
{"level":20,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization section, expecting 1 items"}
{"level":30,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found multi-item personalization: Text=\"Vinnie\", Color1=\"Yellow\", Color2=\"White\""}
{"level":30,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found fallback multi-item personalization (text only): \"🌟 Y3D AI – Happy Friday!\""}
{"level":30,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found fallback multi-item personalization (text only): \"Placeholder - Review Needed\""}
{"level":40,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Expected 1 items but found 3 personalizations in notes lines"}
{"level":20,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619] Extracted 3 personalizations from internal notes."}
{"level":20,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] Preparing extraction..."}
{"level":10,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] Input Data JSON:\\n{\n  \"orderId\": 30619,\n  \"orderNumber\": \"202-9099631-4875535\",\n  \"marketplace\": \"amazon\",\n  \"customerNotes\": null,\n  \"items\": [\n    {\n      \"itemId\": 59935,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"PER-KEY3D-STY3-Y3D\",\n      \"productName\": \"2-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Name or Text\",\n          \"value\": \"Placeholder - Review Needed\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218484156,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30619,\\n  \\\"orderNumber\\\": \\\"202-9099631-4875535\\\",\\n  \\\"marketplace\\\": \\\"amazon\\\",\\n  \\\"customerNotes\\\": null,\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59935,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"PER-KEY3D-STY3-Y3D\\\",\\n      \\\"productName\\\": \\\"2-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Name or Text\\\",\\n          \\\"value\\\": \\\"Placeholder - Review Needed\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218493272,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] Call response status: 200 (9116ms)."}
{"level":20,"time":1746218493273,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59935\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"UNKNOWN_COLOR\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"UNKNOWN_COLOR\"}}}"}
{"level":30,"time":1746218493273,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59935\":{\"personalizations\":[{\"customText\":\"Placeholder - Review Needed\",\"color1\":null,\"color2\":null,\"quantity\":1,\"needsReview\":true,\"reviewReason\":\"UNKNOWN_COLOR\",\"annotation\":null}],\"overallNeedsReview\":true,\"overallReviewReason\":\"UNKNOWN_COLOR\"}}}"}
{"level":20,"time":1746218493273,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] Parsed JSON response."}
{"level":30,"time":1746218493273,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30619] AI response validated."}
{"level":30,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Found matching personalization for item 59935 based on database task values"}
{"level":30,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619][Item 59935] Using personalization from internal notes: \"Placeholder - Review Needed\""}
{"level":20,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30619][Item 59935] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":30,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619][Item 59935] 🔄 RECOVERING DATA from internal notes: \"Placeholder - Review Needed\" with colors: None / None"}
{"level":30,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619][Item 59935] Replacing AI data with recovered data from ShipStation notes"}
{"level":30,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30619][Item 59935] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Placeholder - Review Needed","msg":"Comparing custom_text"}
{"level":20,"time":1746218493389,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_1"}
{"level":20,"time":1746218493390,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218493390,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218493390,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218493390,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218493390,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"db":null,"target":"Recovered from ShipStation internal notes at 2025-05-02T20:41:33.389Z","msg":"Comparing annotation"}
{"level":20,"time":1746218493390,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30619,"itemId":59935,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218493390,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30619][Item 59935][Task 2207] Updating task with: {\"needs_review\":false,\"review_reason\":null,\"annotation\":\"Recovered from ShipStation internal notes at 2025-05-02T20:41:33.389Z\"}"}
{"level":20,"time":1746218493544,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30619][Item 59935] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Placeholder - Review Needed\"}]"}
{"level":30,"time":1746218493580,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30619] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218493581,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30619] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271235013
[API] Fetched single order 202-9099631-4875535 (ID: 271235013). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271235013 …
[ShipStation API] Sending payload: {
  "orderId": 271235013,
  "orderNumber": "202-9099631-4875535",
  "orderKey": "202-9099631-4875535",
  "orderDate": "2025-05-01T06:13:08.0000000",
  "createDate": "2025-05-01T07:09:50.6030000",
  "modifyDate": "2025-05-02T01:28:37.3270000",
  "paymentDate": "2025-05-01T06:13:08.0000000",
  "shipByDate": "2025-05-05T17:00:00.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128782314,
  "customerUsername": "pd18pvspl32g4wj@marketplace.amazon.co.uk",
  "customerEmail": "pd18pvspl32g4wj@marketplace.amazon.co.uk",
  "billTo": {
    "name": "Amy",
    "company": null,
    "street1": "24",
    "street2": "ELMWOOD",
    "street3": "",
    "city": "SAWBRIDGEWORTH",
    "state": "",
    "postalCode": "CM21 9NW",
    "country": "GB",
    "phone": "07894509751",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Amy Dye",
    "company": "",
    "street1": "24",
    "street2": "ELMWOOD",
    "street3": "",
    "city": "SAWBRIDGEWORTH",
    "state": "",
    "postalCode": "CM21 9NW",
    "country": "GB",
    "phone": "07894509751",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386899737,
      "lineItemKey": "48743039460722",
      "sku": "PER-KEY3D-STY3-Y3D",
      "name": "2-Colour Keyring",
      "imageUrl": "https://m.media-amazon.com/images/I/41URdVxOwhL.jpg",
      "weight": {
        "value": 26,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 2.99,
      "taxAmount": 0.75,
      "shippingAmount": 1.49,
      "warehouseLocation": "",
      "options": [
        {
          "name": "Name or Text",
          "value": "Placeholder - Review Needed"
        }
      ],
      "productId": 14029792,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-02T01:28:37.327",
      "modifyDate": "2025-05-02T01:28:37.327"
    }
  ],
  "orderTotal": 5.23,
  "amountPaid": 4.48,
  "taxAmount": 0.75,
  "shippingAmount": 1.49,
  "customerNotes": null,
  "internalNotes": "🌟 Y3D AI – Happy Thursday!\n🤖 AI personalised 1 item\nVinnie (Yellow / White)\nTask sync 2025-05-01T14:14:31.386Z -> 48743039460722(AmazonURL)\n🌟 Y3D AI – Happy Friday!\nPlaceholder - Review Needed\nTask sync 2025-05-02T08:28:36.591Z -> 48743039460722\nDB Task Update 2025-05-02T20:41:34.219Z -> 48743039460722(NotesRecovery)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": "Other",
  "requestedShippingService": "Standard Std UK Dom_1",
  "carrierCode": "amazon_shipping",
  "serviceCode": "amazon_rm_crl48_ltr",
  "packageCode": "package",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 26,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 26,
    "width": 16,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 112576,
    "customField1": "Placeholder - Review Needed",
    "customField2": "",
    "customField3": "",
    "source": "amazon",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 163397
  },
  "tagIds": [
    29438
  ],
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271235013.
{"level":30,"time":1746218495481,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30619] Successfully updated items: 48743039460722(NotesRecovery)"}
{"level":30,"time":1746218495481,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30620 (05-13029-83338) ---"}
{"level":20,"time":1746218495481,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30620] Fetching latest data from ShipStation (ID: 271234816)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271234816
[API] Fetched single order 05-13029-83338 (ID: 271234816). Status: awaiting_shipment
{"level":20,"time":1746218496099,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30620] No internal notes found."}
{"level":20,"time":1746218496099,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30620] Notes match between DB and ShipStation."}
{"level":20,"time":1746218496099,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30620] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218496099,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] Preparing extraction..."}
{"level":10,"time":1746218496100,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] Input Data JSON:\\n{\n  \"orderId\": 30620,\n  \"orderNumber\": \"05-13029-83338\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: 663689296400\\nText: Mans\",\n  \"items\": [\n    {\n      \"itemId\": 59936,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_8\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Brown\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218496100,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218496100,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30620,\\n  \\\"orderNumber\\\": \\\"05-13029-83338\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: 663689296400\\\\nText: Mans\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59936,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_8\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Brown\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218506711,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] Call response status: 200 (10611ms)."}
{"level":20,"time":1746218506712,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59936\":{\"personalizations\":[{\"customText\":\"Mans\",\"color1\":\"Brown\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218506712,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"59936\":{\"personalizations\":[{\"customText\":\"Mans\",\"color1\":\"Brown\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218506712,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] Parsed JSON response."}
{"level":30,"time":1746218506712,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30620] AI response validated."}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30620][Item 59936] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30620][Item 59936] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30620][Item 59936] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Mans","msg":"Comparing custom_text"}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"db":null,"target":"Brown","msg":"Comparing color_1"}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30620,"itemId":59936,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218506738,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30620][Item 59936][Task 2204] Updating task with: {\"custom_text\":\"Mans\",\"color_1\":\"Brown\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218506843,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30620][Item 59936] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Mans\"},{\"name\":\"Colour 1\",\"value\":\"Brown\"}]"}
{"level":30,"time":1746218506874,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30620] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218506874,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30620] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271234816
[API] Fetched single order 05-13029-83338 (ID: 271234816). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271234816 …
[ShipStation API] Sending payload: {
  "orderId": 271234816,
  "orderNumber": "05-13029-83338",
  "orderKey": "05-13029-83338",
  "orderDate": "2025-05-01T06:32:57.0000000",
  "createDate": "2025-05-01T07:08:54.4270000",
  "modifyDate": "2025-05-01T07:08:58.9670000",
  "paymentDate": "2025-05-01T06:32:56.9630000",
  "shipByDate": "2025-05-08T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128782257,
  "customerUsername": "amaconr_0",
  "customerEmail": "1f56603c7c3cd7dbc167@members.ebay.com",
  "billTo": {
    "name": "Amanda Conradie",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07514228757",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Amanda Conradie",
    "company": "",
    "street1": "5 BROOMLEE COURT",
    "street2": "Broomlee Cresent ebayehrcxkb",
    "street3": null,
    "city": "West Linton",
    "state": "Scottish Borders",
    "postalCode": "EH46 7EY",
    "country": "GB",
    "phone": "07514228757",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386599426,
      "lineItemKey": "10071839025205",
      "sku": "wi_395107128418_8",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Mans"
        },
        {
          "name": "Colour 1",
          "value": "Brown"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T07:08:54.39",
      "modifyDate": "2025-05-01T07:08:54.39"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: 663689296400\nText: Mans",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nMans (Brown)\nDB Task Update 2025-05-02T20:41:47.577Z -> 10071839025205(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Mans (Brown)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271234816.
{"level":30,"time":1746218508633,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30620] Successfully updated items: 10071839025205(AI)"}
{"level":30,"time":1746218508633,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30621 (06-13028-39113) ---"}
{"level":20,"time":1746218508633,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30621] Fetching latest data from ShipStation (ID: 271234825)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271234825
[API] Fetched single order 06-13028-39113 (ID: 271234825). Status: awaiting_shipment
{"level":20,"time":1746218509375,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30621] No internal notes found."}
{"level":20,"time":1746218509375,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30621] Notes match between DB and ShipStation."}
{"level":20,"time":1746218509375,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30621] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218509375,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] Preparing extraction..."}
{"level":10,"time":1746218509375,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] Input Data JSON:\\n{\n  \"orderId\": 30621,\n  \"orderNumber\": \"06-13028-39113\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=White\\nText: Marnie\",\n  \"items\": [\n    {\n      \"itemId\": 59937,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_1\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"White\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218509375,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218509375,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30621,\\n  \\\"orderNumber\\\": \\\"06-13028-39113\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=White\\\\nText: Marnie\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 59937,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_1\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"White\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218516086,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] Call response status: 200 (6711ms)."}
{"level":20,"time":1746218516087,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"59937\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Marnie\",\n          \"color1\": \"White\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":30,"time":1746218516087,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"59937\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Marnie\",\n          \"color1\": \"White\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":20,"time":1746218516087,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] Parsed JSON response."}
{"level":30,"time":1746218516087,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30621] AI response validated."}
{"level":20,"time":1746218516157,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30621][Item 59937] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218516157,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30621][Item 59937] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218516157,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30621][Item 59937] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218516157,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Marnie","msg":"Comparing custom_text"}
{"level":20,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"db":null,"target":"White","msg":"Comparing color_1"}
{"level":20,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30621,"itemId":59937,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218516158,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30621][Item 59937][Task 2203] Updating task with: {\"custom_text\":\"Marnie\",\"color_1\":\"White\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218516248,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30621][Item 59937] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Marnie\"},{\"name\":\"Colour 1\",\"value\":\"White\"}]"}
{"level":30,"time":1746218516279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30621] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218516279,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30621] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271234825
[API] Fetched single order 06-13028-39113 (ID: 271234825). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271234825 …
[ShipStation API] Sending payload: {
  "orderId": 271234825,
  "orderNumber": "06-13028-39113",
  "orderKey": "06-13028-39113",
  "orderDate": "2025-05-01T06:45:18.0000000",
  "createDate": "2025-05-01T07:08:55.8630000",
  "modifyDate": "2025-05-01T07:08:58.9670000",
  "paymentDate": "2025-05-01T06:45:17.8330000",
  "shipByDate": "2025-05-08T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128782258,
  "customerUsername": "charlotteb14",
  "customerEmail": "7d599f9b71067cad2b63@members.ebay.com",
  "billTo": {
    "name": "charlotte barfoot",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "7496563116",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "charlotte barfoot",
    "company": "",
    "street1": "2 Marsh Gardens",
    "street2": "ebayfhr6232",
    "street3": null,
    "city": "Cheltenham",
    "state": "Gloucestershire",
    "postalCode": "GL51 9LL",
    "country": "GB",
    "phone": "7496563116",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386599436,
      "lineItemKey": "10072520349606",
      "sku": "wi_395107128418_1",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Marnie"
        },
        {
          "name": "Colour 1",
          "value": "White"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T07:08:55.833",
      "modifyDate": "2025-05-01T07:08:55.833"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=White\nText: Marnie",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nMarnie (White)\nDB Task Update 2025-05-02T20:41:56.945Z -> 10072520349606(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Marnie (White)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271234825.
{"level":30,"time":1746218518072,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30621] Successfully updated items: 10072520349606(AI)"}
{"level":30,"time":1746218518072,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30623 (27-13001-92446) ---"}
{"level":20,"time":1746218518072,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30623] Fetching latest data from ShipStation (ID: 271256540)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271256540
[API] Fetched single order 27-13001-92446 (ID: 271256540). Status: awaiting_shipment
{"level":20,"time":1746218518777,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30623] No internal notes found."}
{"level":20,"time":1746218518777,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30623] Notes match between DB and ShipStation."}
{"level":20,"time":1746218518777,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30623] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218518777,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] Preparing extraction..."}
{"level":10,"time":1746218518777,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] Input Data JSON:\\n{\n  \"orderId\": 30623,\n  \"orderNumber\": \"27-13001-92446\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: Color=Red\\nText: Nikki\\nItem ID: 395107128418 Variation: Color=Blue\\nText: Sally\",\n  \"items\": [\n    {\n      \"itemId\": 60216,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_3\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Red\"\n        }\n      ]\n    },\n    {\n      \"itemId\": 60217,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_2\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Blue\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218518777,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218518777,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30623,\\n  \\\"orderNumber\\\": \\\"27-13001-92446\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: Color=Red\\\\nText: Nikki\\\\nItem ID: 395107128418 Variation: Color=Blue\\\\nText: Sally\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 60216,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_3\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Red\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"itemId\\\": 60217,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_2\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Blue\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218526861,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] Call response status: 200 (8084ms)."}
{"level":20,"time":1746218526862,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"60216\":{\"personalizations\":[{\"customText\":\"Nikki\",\"color1\":\"Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null},\"60217\":{\"personalizations\":[{\"customText\":\"Sally\",\"color1\":\"Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":30,"time":1746218526862,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] RAW RESPONSE Content:\n{\"itemPersonalizations\":{\"60216\":{\"personalizations\":[{\"customText\":\"Nikki\",\"color1\":\"Red\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null},\"60217\":{\"personalizations\":[{\"customText\":\"Sally\",\"color1\":\"Blue\",\"color2\":null,\"quantity\":1,\"needsReview\":false,\"reviewReason\":null,\"annotation\":null}],\"overallNeedsReview\":false,\"overallReviewReason\":null}}}"}
{"level":20,"time":1746218526862,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] Parsed JSON response."}
{"level":30,"time":1746218526863,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30623] AI response validated."}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60216] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30623][Item 60216] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60216] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Nikki","msg":"Comparing custom_text"}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"db":null,"target":"Red","msg":"Comparing color_1"}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60216,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218526879,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60216][Task 2216] Updating task with: {\"custom_text\":\"Nikki\",\"color_1\":\"Red\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218526936,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60216] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Nikki\"},{\"name\":\"Colour 1\",\"value\":\"Red\"}]"}
{"level":20,"time":1746218526936,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60217] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218526936,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30623][Item 60217] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218526936,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60217] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Sally","msg":"Comparing custom_text"}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"db":null,"target":"Blue","msg":"Comparing color_1"}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30623,"itemId":60217,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218526937,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60217][Task 2217] Updating task with: {\"custom_text\":\"Sally\",\"color_1\":\"Blue\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218526991,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30623][Item 60217] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Sally\"},{\"name\":\"Colour 1\",\"value\":\"Blue\"}]"}
{"level":30,"time":1746218527013,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30623] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218527013,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30623] Attempting to update 2 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271256540
[API] Fetched single order 27-13001-92446 (ID: 271256540). Status: awaiting_shipment
[ShipStation API] Batch‑updating 2 items in order 271256540 …
[ShipStation API] Sending payload: {
  "orderId": 271256540,
  "orderNumber": "27-13001-92446",
  "orderKey": "27-13001-92446",
  "orderDate": "2025-05-01T07:50:53.0000000",
  "createDate": "2025-05-01T08:21:30.1200000",
  "modifyDate": "2025-05-01T08:21:34.9100000",
  "paymentDate": "2025-05-01T07:50:54.1000000",
  "shipByDate": "2025-05-08T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128789097,
  "customerUsername": "marybellaboo86",
  "customerEmail": "1f5684d07c3cd7e25c88@members.ebay.com",
  "billTo": {
    "name": "Sally Barnard",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07894650237",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Sally Barnard",
    "company": "",
    "street1": "12 Cynthia Road",
    "street2": "ebay4hmfhzn",
    "street3": null,
    "city": "Grimsby",
    "state": "",
    "postalCode": "Dn328lt",
    "country": "GB",
    "phone": "07894650237",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386626531,
      "lineItemKey": "10075817721827",
      "sku": "wi_395107128418_3",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Nikki"
        },
        {
          "name": "Colour 1",
          "value": "Red"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T08:21:30.09",
      "modifyDate": "2025-05-01T08:21:30.09"
    },
    {
      "orderItemId": 386626532,
      "lineItemKey": "10075817721927",
      "sku": "wi_395107128418_2",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Sally"
        },
        {
          "name": "Colour 1",
          "value": "Blue"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T08:21:30.09",
      "modifyDate": "2025-05-01T08:21:30.09"
    }
  ],
  "orderTotal": 3.98,
  "amountPaid": 3.78,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: Color=Red\nText: Nikki\nItem ID: 395107128418 Variation: Color=Blue\nText: Sally",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 2 items\nNikki (Red)\nSally (Blue)\nDB Task Update 2025-05-02T20:42:07.688Z -> 10075817721827(AI), 10075817721927(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 20,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271256540.
{"level":30,"time":1746218528872,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30623] Successfully updated items: 10075817721827(AI), 10075817721927(AI)"}
{"level":30,"time":1746218528872,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Processing Order ID: 30624 (27-13001-86386) ---"}
{"level":20,"time":1746218528872,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30624] Fetching latest data from ShipStation (ID: 271256544)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271256544
[API] Fetched single order 27-13001-86386 (ID: 271256544). Status: awaiting_shipment
{"level":20,"time":1746218529520,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30624] No internal notes found."}
{"level":20,"time":1746218529520,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30624] Notes match between DB and ShipStation."}
{"level":20,"time":1746218529520,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30624] Extracted 0 personalizations from internal notes."}
{"level":20,"time":1746218529520,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] Preparing extraction..."}
{"level":10,"time":1746218529520,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] Input Data JSON:\\n{\n  \"orderId\": 30624,\n  \"orderNumber\": \"27-13001-86386\",\n  \"marketplace\": \"ebay_v2\",\n  \"customerNotes\": \"Personalisation:\\nItem ID: 395107128418 Variation: 663689296402\\nText: Ashleigh \",\n  \"items\": [\n    {\n      \"itemId\": 60218,\n      \"quantityOrdered\": 1,\n      \"productSku\": \"wi_395107128418_10\",\n      \"productName\": \"1-Colour\",\n      \"printSettings\": [\n        {\n          \"name\": \"Color\",\n          \"value\": \"Pine Green\"\n        }\n      ]\n    }\n  ]\n}"}
{"level":30,"time":1746218529520,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] Calling OpenAI (o4-mini)..."}
{"level":10,"time":1746218529520,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] Payload: {\"model\":\"o4-mini\",\"messages\":[{\"role\":\"system\",\"content\":\"\\n# Additional Priority Instruction for this Run (HIGH):\\n\\n1. **Color Override** – If the \\\"customerNotes\\\" field contains explicit lines such as \\\"Colour:\\\" / \\\"Color:\\\" / \\\"Primary Colour:\\\" or \\\"Secondary colour:\\\" / \\\"Colour 2:\\\", ALWAYS use those values for 'color1' / 'color2', overriding any other source.\\n\\n2. **Quantity Integrity (NEW RULE)** – For every item in the input JSON:\\n   • Let 'expected_quantity' = 'quantityOrdered'.\\n   • You MUST return exactly expected_quantity personalization objects and no more.\\n   • If expected_quantity is 1, NEVER split the text into multiple personalization objects — even if multiple names or lines are present. Return exactly one object with 'quantity' = 1.\\n   • Only consider splitting when expected_quantity > 1 and strong evidence exists (e.g., clearly numbered/bulleted multi-line notes AND the number of lines equals expected_quantity).\\n\\n3. **Mismatch Handling** – If after processing you believe the parsed quantity does not equal expected_quantity, do NOT create extra personalization objects. Instead:\\n   • Return one object with 'needsReview' = true and 'reviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n   • Set 'overallNeedsReview' to true with 'overallReviewReason' = \\\"QUANTITY_MISMATCH\\\".\\n\\nFollow these rules strictly. Returning the wrong number of personalization objects breaks downstream logic.\\n\\n\\n# System Prompt\\n**Purpose**\\n\\nYou are an AI assistant tasked with extracting personalization details for 3D printing from e-commerce order data provided in JSON format.\\n\\n**Instructions**\\n\\nFocus exclusively on:\\n- The JSON data provided under the \\\"Actual Order Data\\\" heading.\\n\\nIgnore:\\n- Any previous context or external information.\\n\\n**Output Requirements**\\n\\nYour response must:\\n- Be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain only the JSON object without any additional text, explanations, or formatting.\\n- Include ALL items from the input JSON in your response, even if you can't find personalization details for them.\\n\\n**JSON Structure**\\n\\n```json\\n{\\n  \\\"itemPersonalizations\\\": {\\n    \\\"INTERNAL_ITEM_ID\\\": {\\n      \\\"personalizations\\\": [\\n        {\\n          \\\"customText\\\": \\\"...\\\", // The extracted personalization text (e.g., name, registration)\\n          \\\"color1\\\": \\\"...\\\",     // Primary color, if applicable\\n          \\\"color2\\\": null,      // Secondary color (for 2-color items), if applicable\\n          \\\"quantity\\\": 1,       // Quantity for this specific personalization (usually 1 if split)\\n          \\\"needsReview\\\": false,// Flag if manual review is needed\\n          \\\"reviewReason\\\": null,// Reason for review flag or informative note\\n          \\\"annotation\\\": null   // Optional internal annotation (e.g., about splitting)\\n        }\\n        // ... potentially more personalization objects if split from input ...\\n      ],\\n      \\\"overallNeedsReview\\\": false, // Flag if the item as a whole needs review (e.g., quantity mismatch)\\n      \\\"overallReviewReason\\\": null  // Reason for overall item review\\n    }\\n  }\\n}\\n```\\n\\n**IMPORTANT: Default Handling for Missing Personalization**\\n\\nYou MUST include an entry in `itemPersonalizations` for EVERY item ID in the input JSON's `items` array. If you cannot extract *any* specific personalization details for an item (neither from `print_settings`, `customerNotes`, nor inferred from product type):\\n- Create an entry for that `INTERNAL_ITEM_ID`.\\n- Include a *single* object in the `personalizations` array with:\\n    - `\\\"customText\\\": null`\\n    - `\\\"color1\\\": null`\\n    - `\\\"color2\\\": null`\\n    - `\\\"quantity\\\"` set to match the item's original `\\\"quantityOrdered\\\"` value.\\n    - `\\\"needsReview\\\": true`\\n    - `\\\"reviewReason\\\": \\\"No personalization details found\\\"`\\n- Set `\\\"overallNeedsReview\\\": true` for the item.\\n- Set `\\\"overallReviewReason\\\": \\\"No personalization details found\\\"` for the item.\\n\\n**Core Personalization Extraction Logic**\\n\\nFor each item in the input `items` array:\\n1.  **Examine `customerNotes` FIRST for explicit color/text:**\\n    *   Look thoroughly for lines starting with \\\"Personalisation:\\\", \\\"Text:\\\", \\\"Name:\\\", etc. Use the value following this as the primary source for `customText`.\\n    *   Look thoroughly for lines starting with \\\"Colour:\\\", \\\"Color:\\\", \\\"Primary Colour:\\\", etc. Use the value following this as the primary source for `color1`.\\n    *   Look thoroughly for lines starting with \\\"Secondary colour:\\\", \\\"Color 2:\\\", etc. Use the value following this as the primary source for `color2`.\\n2.  **Examine `print_settings` SECOND:**\\n    *   If `customText` was NOT found in notes, look for options named \\\"Personalization\\\", \\\"Text\\\", \\\"Custom Text\\\", \\\"Name\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color1` was NOT found in notes, look for options named \\\"Color\\\", \\\"Colour 1\\\", etc., in `print_settings`. Use its `value` if found.\\n    *   If `color2` was NOT found in notes, look for options named \\\"Secondary color\\\", \\\"Colour 2\\\", etc., in `print_settings`. Use its `value` if found.\\n3.  **Infer Color from Product Name THIRD:** If `color1` is still undetermined, check the product name for bracketed colors (e.g., \\\"[Light Blue]\\\").\\n4.  **Apply REGKEY Logic:** Apply specific REGKEY color logic if applicable (see below).\\n5.  **Default Handling:** Only if NO personalization text AND NO colors were found through any of the above steps, should you resort to the \\\"Default Handling for Missing Personalization\\\" rule.\\n\\n### Special Handling: Car Registration Keyrings (SKU contains \\\"REGKEY\\\")\\n# ... existing REGKEY handling ...\\n\\n### Special Handling: Multiple Personalizations / Complex Formatting (Revised Combined Logic)\\n\\n**Goal:** Accurately extract individual personalizations, even when multiple are combined into a single field (`customerNotes` or `print_settings` value) using various customer formats, AND handle cases where `quantityOrdered` might mismatch the actual number of items described.\\n\\n**Core Principle:** Use multiple signals to determine if splitting is needed: `quantityOrdered`, product name patterns (e.g., \\\"Nx\\\", \\\"Set of N\\\"), and the structure of `customerNotes` (e.g., multiple lines).\\n\\n**Parsing Strategy:**\\n\\n1.  **Check for Multiple Items Trigger:** Examine the context. Should you *attempt* to split the personalization text? Trigger an attempt if ANY of the following are true:\\n    *   `quantityOrdered > 1`.\\n    *   The `productName` contains patterns like \\\"Nx\\\", \\\"Set of N\\\", \\\"Pack of N\\\" (where N is a number > 1).\\n    *   The `customerNotes` contain multiple lines (`\\\\n`) where each line appears to represent a distinct item.\\n    *   The `customerNotes` use clear separators (commas, semicolons, pipes) between parts that look like distinct names/items (use caution with multi-word names).\\n    *   The `customerNotes` show repeated structures or numbered/bulleted lists suggesting multiple items.\\n\\n2.  **Attempt Splitting/Parsing (If Triggered in Step 1):**\\n    *   If a trigger condition was met, attempt to split the text (primarily from `customerNotes`, but consider `print_settings` value if notes are empty) into individual items based on the detected structure (newlines are the primary separator).\\n    *   For each potential item identified:\\n        *   Extract `customText`. Apply formatting rules (see \\\"Field Formatting\\\" below).\\n        *   Extract `color1` and `color2` if possible *from the item's specific text segment* (e.g., `(Blue >Jack)` -> color1=\\\"Blue\\\"). If not specified per item, use the overall item context (separate `print_settings` Color option, product name variation, REGKEY rules). Apply the *same* context color(s) to all split items unless specified otherwise. Apply color mapping/validation (see \\\"Field Formatting\\\" below). Set to `null` if no color info is found.\\n        *   Determine `quantity`. Default to `1` for each split item, unless the text explicitly states a quantity for that specific item (e.g., `2x Name`).\\n        *   Create a separate personalization object in the output array `itemPersonalizations.<itemId>.personalizations`.\\n        *   Set `needsReview` to `false` initially for this sub-item (unless specific issues arise during parsing).\\n\\n3.  **No Splitting Attempted (If Not Triggered in Step 1):**\\n    *   If no trigger condition was met in Step 1, process the available text (from notes or print settings) as a *single* personalization object.\\n    *   Set its `quantity` to the item's `quantityOrdered`.\\n    *   Extract `customText`, `color1`, `color2` based on the overall context.\\n    *   Proceed directly to Field Formatting rules for this single object. Set `overallNeedsReview` based on standard rules (e.g., missing info).\\n\\n4.  **Quantity Validation (CRITICAL - Run AFTER Step 2 or 3):**\\n    *   Let `parsed_count` be the total number of personalization objects created for the item ID (either 1 from Step 3, or the sum from Step 2).\\n    *   Let `parsed_total_quantity` be the sum of the `quantity` fields from all created personalization objects for this item ID.\\n    *   Let `expected_quantity` be the item's `quantityOrdered` from the input JSON.\\n    *   Let `name_implied_quantity` be the quantity suggested by the product name (e.g., \\\"30x\\\" -> 30), or `null` if not present.\\n    *   Let `notes_line_count` be the number of non-empty lines in `customerNotes` if splitting by newline was attempted, or `null` otherwise.\\n\\n    *   **Primary Check:** Does `parsed_total_quantity` match `expected_quantity`?\\n        *   **If YES:** Parsing quantity matches the order quantity. This is generally good. Set `overallNeedsReview` based *only* on individual item review flags or other specific issues (like font requests). Set `overallReviewReason` accordingly.\\n        *   **If NO:** There's a mismatch between parsed quantity and order quantity. This *always* requires review.\\n            *   Set `overallNeedsReview` to `true`.\\n            *   Construct `overallReviewReason`: Start with `QUANTITY_MISMATCH: OrderQty=${expected_quantity}, ParsedTotalQty=${parsed_total_quantity}.`.\\n            *   Add context: If `name_implied_quantity` exists, add `ProductNameQty=${name_implied_quantity}.`. If `notes_line_count` exists, add `NotesLines=${notes_line_count}.`. Append any individual `reviewReason`s.\\n            *   **Action on Mismatch (Revised Again):**\\n                *   **Scenario A (Plausible Split Despite Mismatch):** If splitting *was attempted* (Step 2) based on triggers like `notes_line_count` or `name_implied_quantity`, **YOU MUST KEEP THE SPLIT RESULTS** derived from that structure (e.g., one object per line in notes, resulting in `parsed_count` objects). Assign `quantity: 1` to each split object unless explicitly stated otherwise in its text segment. Ensure `overallNeedsReview` is `true` and the detailed `overallReviewReason` clearly reflects the discrepancy (e.g., `QUANTITY_MISMATCH: OrderQty=1, ParsedTotalQty=33, NotesLines=33. Used notes structure.`). **DO NOT revert to a single placeholder just because `parsed_total_quantity` does not equal `expected_quantity`. The structure implied by `customerNotes` (especially newlines) or `productName` takes precedence over `quantityOrdered` in this scenario.**\\n                *   **Scenario B (Unreliable Split or No Split Attempted):** Only if splitting was *not* triggered (Step 3 resulted in mismatch) OR if the splitting attempt (Step 2) itself failed badly (e.g., couldn't parse distinct items despite triggers like newlines), THEN discard any split results and create a *single* placeholder personalization object for the *entire* original text. Set its quantity to `expected_quantity`, mark `needsReview: true`, and include the original complex text and the mismatch details in the `reviewReason` or `annotation`.\\n\\n5.  **Final Review Check:** Ensure `overallNeedsReview` is `true` if any individual personalization object has `needsReview: true`, even if quantities matched. Compile all unique reasons into `overallReviewReason`.\\n\\n### Field Formatting and Mapping\\n\\n**`customText` Formatting:**\\n- **Default:** Convert to Title Case.\\n- **Exceptions (Preserve Original Case/Format):**\\n    - **REGKEYs:** Preserve UPPERCASE for car registrations.\\n    - **Acronyms:** Preserve UPPERCASE for standalone acronyms (e.g., \\\"NHS\\\").\\n    - **Short All-Caps/Numeric Words:** Preserve UPPERCASE for short words (3-5 characters) consisting ONLY of uppercase letters (A-Z) and/or digits (0-9). Examples: \\\"TMG\\\", \\\"BMW\\\", \\\"CGW\\\", \\\"STOPP\\\", \\\"KP9\\\". **This rule overrides default Title Casing for matching patterns.** If this rule is applied, set `needsReview: true`. **Flag for review.**\\n    - **Business Names w/ Acronyms:** Preserve acronym part, Title Case subsequent words (e.g., \\\"KJL CLEANING\\\" -> \\\"KJL Cleaning\\\"). **Flag for review.**\\n    - **Internal Caps:** Preserve patterns like \\\"JohnSmith\\\", \\\"OakleyM\\\".\\n    - **Multiple Caps:** Preserve words with multiple consecutive caps (e.g., \\\"XYZ Corp\\\"). **Flag for review.**\\n    - **Explicit Request:** If notes say \\\"keep caps\\\", preserve casing.\\n- **Specific Cases:**\\n    - Apply Title Case even if numbers are present (e.g., \\\"4335 BRYSON\\\" -> \\\"4335 Bryson\\\").\\n    - Apply Title Case to text parts around symbols/emojis (e.g., \\\"❤️xSUEx❤️\\\" -> \\\"❤️xSuex❤️\\\").\\n- **Cleanup:**\\n    - Remove color specifications (e.g., \\\"(in pink)\\\", \\\"- Blue\\\") and numbering prefixes unless part of a preserved format.\\n    - Trim leading/trailing whitespace/punctuation.\\n    - Preserve special characters and emojis within the text. Add annotation \\\"Contains emoji/special character\\\" but don't flag for review solely for this.\\n    - Preserve non-English characters (é, ü, ñ).\\n\\n**`color1`, `color2` Formatting & Mapping:**\\n- **Standard Colors List:** Black, Grey, Light Blue, Blue, Dark Blue, Brown, Orange, Matt Orange, Silk Orange, Red, Fire Engine Red, Rose Gold, Magenta, White, Yellow, Silver, Silk Silver, Purple, Pink, Gold, Skin, Peak Green, Green, Olive Green, Pine Green, Cold White, Matt Pink, Silk Pink, Glow in the Dark, Bronze, Beige, Turquoise, Bone White.\\n- **Priority (Absolute):** If an extracted color name **exactly matches** (case-sensitive) an entry in the Standard Colors List above, use that standard color directly. **This is the highest priority rule for colors. DO NOT map these standard colors further, even if other mapping rules seem applicable (e.g., do not map 'Green' if 'Green' is on the list).**\\n- **Mapping:** If an extracted color does *not* exactly match the standard list, *then* map common variations (e.g., \\\"Navy\\\" -> \\\"Dark Blue\\\", \\\"Green\\\": \\\"Peak Green\\\"). Add annotation for mapping if needed.\\n- **\\\"Random Selection\\\" / \\\"Your Choice\\\":** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Customer requested random color\\\"`.\\n- **Unknown Colors:** Set `color1: null`, `needsReview: true`, `reviewReason: \\\"Unknown color: [original text]\\\"`.\\n- **Contrasting Colors:** If notes mention \\\"contrasting colour\\\" but don't specify, set `needsReview: true`, `reviewReason: \\\"Contrasting color requested but not specified\\\"`. If specified, use for `color2`.\\n- **Conflicting Information:** If `customerNotes` contain an explicit color request (e.g., \\\"use Red\\\", \\\"Pink: Robbin\\\") that conflicts with a color found in `print_settings` or the product name, **prioritize the color requested in `customerNotes`**. Set `needsReview: true` for the affected personalization object and set `reviewReason: \\\"Color conflict: Notes override default/option (Used [ColorFromNotes], Default was [ColorFromDefault])\\\"`.\\n\\n### Specific Edge Case Handling\\n\\n- **Error Corrections:** If notes mention \\\"mistake\\\", \\\"typo\\\", \\\"sorry\\\", \\\"meant to say\\\", prioritize the corrected information. Add annotation about the correction. If ambiguous, set `needsReview: true`, `reviewReason: \\\"Customer mentioned error/correction\\\"`.\\n- **Duplicate Names:** If the *same name* appears multiple times *after splitting*:\\n    - If colors differ, keep as separate personalizations.\\n    - If colors are the same, consolidate into one personalization object and sum their quantities (defaulting to 1 each before summing). Add annotation \\\"Consolidated duplicate name\\\". Check final quantity against `quantityOrdered`.\\n- **Special Instructions:** If notes contain \\\"urgent\\\", \\\"needed by\\\", \\\"please note\\\", add this information to the `annotation` field of the relevant personalization(s). Do *not* include in `customText`.\\n- **Explicit No Personalization:** If the extracted text explicitly indicates no personalization (e.g., 'None', 'N/A', 'Leave Blank', 'No Name', 'None / N/A'), set `customText` to `null`, `color1` to `null`, `color2` to `null`, `quantity` to the item's `quantityOrdered`, and ensure `needsReview` is `false` (unless other issues exist). Add annotation \\\"Explicit 'no personalization' request\\\".\\n- **Font Requests:** If the text contains a specific font request (e.g., 'use Arial font', 'font: Chewy'), **do not** include the font name in `customText`. Add the request to the `annotation` field (e.g., \\\"Font request: Arial\\\"). Set `needsReview: true` for the affected personalization object with `reviewReason: \\\"Font request mentioned\\\"`.\\n\\n### Review Flagging Logic (`needsReview`, `reviewReason`, `overallNeedsReview`)\\n\\n- **Individual `needsReview` (per personalization object):** Set to `true` if:\\n    - `customText` could not be determined (is `null`) **AND** it wasn't an explicit \\\"No Personalization\\\" request.\\n    - `color1` is `null` due to \\\"Random Selection\\\" or \\\"Unknown color\\\".\\n    - Ambiguity during parsing of a specific segment (e.g., unclear split).\\n    - Ambiguous formatting rule applied (preserving short all-caps, acronyms, multiple caps).\\n    - **Conflicting color information** was resolved by prioritizing customer notes.\\n    - Explicit request for contrasting color was not specific.\\n    - Customer mentioned an error/correction that requires verification.\\n    - **A font request was mentioned.**\\n- **`reviewReason`:** Provide a concise reason when `needsReview` is true. Use codes/standard phrases where possible (e.g., \\\"UNKNOWN_COLOR\\\", \\\"RANDOM_COLOR\\\", \\\"AMBIGUOUS_PARSE\\\", \\\"CUSTOMER_CORRECTION\\\").\\n- **`overallNeedsReview` (per item ID):** Set to `true` if:\\n    - Any personalization object within that item has `needsReview: true`.\\n    - The final quantity validation check failed (mismatch or ambiguous split).\\n    - No personalization details were found at all for the item.\\n    - `quantityOrdered > 1` but only a single personalization was processed due to ambiguous text (Rule 4 in Multiple Personalizations section).\\n- **`overallReviewReason`:** Compile unique `reviewReason`s from individual personalizations, plus any overall reason (like \\\"QUANTITY_MISMATCH\\\" or \\\"NO_DETAILS_FOUND\\\"). Separate multiple reasons with \\\"; \\\". Set to `null` if `overallNeedsReview` is `false`.\\n\\n### Enhanced reviewReason tracking\\n# ... existing reviewReason tracking ...\\n\\n# --- Rest of Prompt ---\\n\\n# Y3DHub Plate Planner AI - Grouping Suggestions v21\\n\\n## Goal\\nYour goal is to analyze a list of 3D print jobs and suggest logical groupings based on SKU and color compatibility to minimize the total number of print plates (tasks) required and reduce filament changes. You are providing *suggestions* for groups, not the final plate assignments. The total number of input jobs is {{TOTAL_JOBS}}.\\n\\n## Input Context\\nYou will receive a JSON object containing:\\n- `jobList`: An array of jobs, each with `id`, `sku`, `color1`, `color2`, `quantity`.\\n- `constraints`: Including `maxColorsPerTask` (the maximum distinct filament colors allowed per final plate, currently {{MAX_COLORS}}).\\n\\n## Core Rules for Suggested Groups\\nThese rules reflect the constraints applied when building the final plates. Your suggested groups should aim to be compatible with these rules.\\n\\n1.  **SKU Purity:** ALL jobs within a single suggested group MUST have the exact same `sku`. Do not mix SKUs in a group.\\n\\n    *When enforcing this rule, first map each job's raw SKU to a **canonical SKU**: treat SKUs that only differ by a trailing variant segment (e.g., an underscore + digits) **or** are known aliases of the same product (e.g., any `wi_395107128418_*` variant and `PER-KEY3D-STY1-Y3D`) as the **same** canonical SKU. Use this canonical form when deciding which jobs can share a group.*\\n\\n2.  **Max Distinct Filament Colors:** The combination of all distinct `color1` and `color2` values for all jobs within a *single* suggested group MUST NOT exceed {{MAX_COLORS}} distinct filament colors total.\\n\\n3.  **Capacity & Combination Limits:**\\n    *   **Single-Color Groups:** If a suggested group contains ONLY single-color items (where `color2` is null/empty for all items), the total item count (sum of `quantity`) should ideally be <= 15.\\n    *   **Dual-Color Groups:** If a suggested group contains ANY dual-color items (where at least one item has a non-empty `color2`):\\n        *   The total item count (sum of `quantity`) should ideally be <= 6.\\n        *   The number of distinct *color combinations* (unique ordered pairs of `color1` > `color2`) MUST be <= 6. (e.g., \\\"Blue > Red\\\" and \\\"Red > Blue\\\" are two distinct combinations). Treat single-color items within such a group as having a combination like \\\"Color1 > null\\\".\\n\\n4.  **Completeness:** Ensure every job ID from the input `jobList` appears in exactly ONE suggested group in your output.\\n\\n5.  **Merge Duplicate SKU Groups:** If your preliminary grouping results in more than one group with the **same** `sku`, attempt to merge those groups **provided** the merged group would still satisfy Rules&nbsp;#2 and&nbsp;#3 (color limits and capacity/combination limits). If a merge is impossible due to those constraints, keep the groups separate but add a brief explanation in the `notes` field of each affected group (e.g., \\\"Cannot merge: >6 color combos\\\").\\n\\n## Output Requirements\\n- Your response MUST be a valid JSON object, starting with `{` and ending with `}`.\\n- Contain ONLY the JSON object without any additional text, explanations, or formatting.\\n- The JSON object MUST have a single top-level key: `suggestedGroups`.\\n\\n## JSON Output Structure\\n\\n```json\\n{\\n  \\\"suggestedGroups\\\": [\\n    {\\n      \\\"sku\\\": \\\"...\\\", // The common SKU for all jobs in this group\\n      \\\"jobIds\\\": [ \\\"id1\\\", \\\"id2\\\", ... ], // Array of job IDs\\n      \\\"colors\\\": [ \\\"ColorA\\\", \\\"ColorB\\\", ... ], // Array of distinct FILAMENT colors required (sorted)\\n      \\\"notes\\\": \\\"Optional: e.g., 'Dual-color group, 5 combos, 6 items'\\\" // Optional\\n    }\\n    // ... more suggested group objects ...\\n  ]\\n}\\n```\\n\\n## Task\\nBased on the input `jobList` and `constraints`, provide the `suggestedGroups` JSON object following all rules and the specified output structure. Prioritize creating groups that share colors/combinations where possible within the same SKU. Aim for the fewest reasonable groups while respecting the capacity and combination limits. Remember, `Blue` and `Light Blue` are distinct colors, and `ColorA > ColorB` is different from `ColorB > ColorA`.\\n\"},{\"role\":\"user\",\"content\":\"## Instructions\\n\\nProcess only the JSON data provided below. Ignore any previous messages or external information.\\n\\n## Actual Order Data\\n\\n{\\n  \\\"orderId\\\": 30624,\\n  \\\"orderNumber\\\": \\\"27-13001-86386\\\",\\n  \\\"marketplace\\\": \\\"ebay_v2\\\",\\n  \\\"customerNotes\\\": \\\"Personalisation:\\\\nItem ID: 395107128418 Variation: 663689296402\\\\nText: Ashleigh \\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"itemId\\\": 60218,\\n      \\\"quantityOrdered\\\": 1,\\n      \\\"productSku\\\": \\\"wi_395107128418_10\\\",\\n      \\\"productName\\\": \\\"1-Colour\\\",\\n      \\\"printSettings\\\": [\\n        {\\n          \\\"name\\\": \\\"Color\\\",\\n          \\\"value\\\": \\\"Pine Green\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n## Output Format\\n\\nReturn ONLY a valid JSON object with the key \\\"itemPersonalizations\\\" as specified in the system instructions.\\n\\n## Important\\n\\n- Do not include any additional text, comments, or explanations in your response.\\n- Return only the JSON object without any markdown formatting.\\n- Ensure all required keys are present in each object, even if set to null.\\n\"}],\"max_completion_tokens\":4096,\"response_format\":{\"type\":\"json_object\"}}"}
{"level":30,"time":1746218536403,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] Call response status: 200 (6883ms)."}
{"level":20,"time":1746218536403,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"60218\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Ashleigh\",\n          \"color1\": \"Pine Green\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":30,"time":1746218536403,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] RAW RESPONSE Content:\n{\n  \"itemPersonalizations\": {\n    \"60218\": {\n      \"personalizations\": [\n        {\n          \"customText\": \"Ashleigh\",\n          \"color1\": \"Pine Green\",\n          \"color2\": null,\n          \"quantity\": 1,\n          \"needsReview\": false,\n          \"reviewReason\": null,\n          \"annotation\": null\n        }\n      ],\n      \"overallNeedsReview\": false,\n      \"overallReviewReason\": null\n    }\n  }\n}"}
{"level":20,"time":1746218536404,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] Parsed JSON response."}
{"level":30,"time":1746218536404,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[AI Update][Order 30624] AI response validated."}
{"level":20,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30624][Item 60218] Comparing 1 DB tasks with 1 AI suggestions. Explicit notes colors: C1=null, C2=null"}
{"level":40,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30624][Item 60218] Found placeholder tasks but couldn't find data in internal notes"}
{"level":30,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30624][Item 60218] AI returned the same number of tasks (1) as exist in DB (1). Updating existing tasks."}
{"level":20,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"db":"Placeholder - Review Needed","target":"Ashleigh","msg":"Comparing custom_text"}
{"level":20,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"db":null,"target":"Pine Green","msg":"Comparing color_1"}
{"level":20,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"db":null,"target":null,"msg":"Comparing color_2"}
{"level":20,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"db":1,"target":1,"msg":"Comparing quantity"}
{"level":20,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"db":true,"target":false,"msg":"Comparing needs_review"}
{"level":20,"time":1746218536482,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"db":"No AI data for item","target":null,"msg":"Comparing review_reason"}
{"level":20,"time":1746218536483,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"db":"Placeholder created: No AI data for item","target":null,"msg":"Comparing annotation"}
{"level":20,"time":1746218536483,"pid":96790,"hostname":"DESKTOP-9HEOMKE","orderId":30624,"itemId":60218,"taskIndex":0,"needsUpdate":true,"msg":"Final needsUpdate check"}
{"level":30,"time":1746218536483,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30624][Item 60218][Task 2218] Updating task with: {\"custom_text\":\"Ashleigh\",\"color_1\":\"Pine Green\",\"needs_review\":false,\"review_reason\":null,\"annotation\":null}"}
{"level":20,"time":1746218536565,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Update][Order 30624][Item 60218] Staging ShipStation update with options: [{\"name\":\"Name or Text\",\"value\":\"Ashleigh\"},{\"name\":\"Colour 1\",\"value\":\"Pine Green\"}]"}
{"level":30,"time":1746218536600,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[Order 30624] Successfully processed DB changes (if any). DB changes made: true"}
{"level":30,"time":1746218536600,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30624] Attempting to update 1 items in ShipStation (DB Changed: true, Force Flag: true)..."}
[API] Attempt 1: Fetching single order from ShipStation: /orders/271256544
[API] Fetched single order 27-13001-86386 (ID: 271256544). Status: awaiting_shipment
[ShipStation API] Batch‑updating 1 items in order 271256544 …
[ShipStation API] Sending payload: {
  "orderId": 271256544,
  "orderNumber": "27-13001-86386",
  "orderKey": "27-13001-86386",
  "orderDate": "2025-05-01T07:30:16.0000000",
  "createDate": "2025-05-01T08:21:31.7930000",
  "modifyDate": "2025-05-01T08:21:34.9100000",
  "paymentDate": "2025-05-01T07:30:16.7870000",
  "shipByDate": "2025-05-08T15:59:59.0000000",
  "orderStatus": "awaiting_shipment",
  "customerId": 128789096,
  "customerUsername": "ally-526",
  "customerEmail": "7d59f4042725c4b3c034@members.ebay.com",
  "billTo": {
    "name": "Allison Higgins",
    "company": null,
    "street1": null,
    "street2": null,
    "street3": null,
    "city": null,
    "state": null,
    "postalCode": null,
    "country": null,
    "phone": "07596920817",
    "residential": null,
    "addressVerified": null
  },
  "shipTo": {
    "name": "Allison Higgins",
    "company": "",
    "street1": "2 Flosh Meadows",
    "street2": "ebay4hmf8sp",
    "street3": null,
    "city": "Cleator",
    "state": "Cumbria",
    "postalCode": "CA23 3EP",
    "country": "GB",
    "phone": "07596920817",
    "residential": false,
    "addressVerified": "Address validated successfully"
  },
  "items": [
    {
      "orderItemId": 386626534,
      "lineItemKey": "10075817380827",
      "sku": "wi_395107128418_10",
      "name": "3D Personalised Keyring - Party Bag / Gifts / Name Tags / School Bag / Travel",
      "imageUrl": "https://i.ebayimg.com/images/g/nk4AAeSwcuZnxCOp/s-l1600.jpg",
      "weight": {
        "value": 10,
        "units": "grams",
        "WeightUnits": 2
      },
      "quantity": 1,
      "unitPrice": 1.99,
      "taxAmount": 0,
      "shippingAmount": 0,
      "warehouseLocation": null,
      "options": [
        {
          "name": "Name or Text",
          "value": "Ashleigh"
        },
        {
          "name": "Colour 1",
          "value": "Pine Green"
        }
      ],
      "productId": 17320864,
      "fulfillmentSku": null,
      "adjustment": false,
      "upc": null,
      "createDate": "2025-05-01T08:21:31.763",
      "modifyDate": "2025-05-01T08:21:31.763"
    }
  ],
  "orderTotal": 1.99,
  "amountPaid": 1.99,
  "taxAmount": 0,
  "shippingAmount": 0,
  "customerNotes": "Personalisation:\nItem ID: 395107128418 Variation: 663689296402\nText: Ashleigh ",
  "internalNotes": "🌟 Y3D AI – Happy Friday!\n🤖 AI personalised 1 item\nAshleigh (Pine Green)\nDB Task Update 2025-05-02T20:42:17.180Z -> 10075817380827(AI)",
  "gift": false,
  "giftMessage": null,
  "paymentMethod": null,
  "requestedShippingService": "UK_RoyalMail48",
  "carrierCode": "royal_mail",
  "serviceCode": "rm_48",
  "packageCode": "large_letter",
  "confirmation": "none",
  "shipDate": null,
  "holdUntilDate": null,
  "weight": {
    "value": 10,
    "units": "grams",
    "WeightUnits": 2
  },
  "dimensions": {
    "units": "centimeters",
    "length": 23,
    "width": 17,
    "height": 2
  },
  "insuranceOptions": {
    "provider": null,
    "insureShipment": false,
    "insuredValue": 0
  },
  "internationalOptions": {
    "contents": null,
    "customsItems": null,
    "nonDelivery": null
  },
  "advancedOptions": {
    "warehouseId": 251153,
    "nonMachinable": false,
    "saturdayDelivery": false,
    "containsAlcohol": false,
    "mergedOrSplit": false,
    "mergedIds": [],
    "parentId": null,
    "storeId": 103611,
    "customField1": "Ashleigh (Pine Green)",
    "customField2": "",
    "customField3": "",
    "source": "ebay_v2",
    "billToParty": "my_other_account",
    "billToAccount": null,
    "billToPostalCode": null,
    "billToCountryCode": null,
    "billToMyOtherAccount": 139553
  },
  "tagIds": null,
  "userId": null,
  "externallyFulfilled": false,
  "externallyFulfilledBy": null,
  "externallyFulfilledById": null,
  "externallyFulfilledByName": null,
  "labelMessages": null
}
[ShipStation API] Batch update success for order 271256544.
{"level":30,"time":1746218538311,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"[ShipStation Batch][Order 30624] Successfully updated items: 10075817380827(AI)"}
{"level":30,"time":1746218538311,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Update Script Complete ---"}
{"level":30,"time":1746218538311,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Processed 24 specified orders."}
{"level":30,"time":1746218538311,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Total tasks updated: 34"}
{"level":30,"time":1746218538311,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Total new tasks created: 2"}
{"level":40,"time":1746218538312,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Orders with Warnings/Manual Intervention Needed ---"}
{"level":40,"time":1746218538312,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Order ID 30594:"}
{"level":40,"time":1746218538312,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"  - Item 57201: AI suggests more tasks (2) than exist (1). Creating missing tasks."}
{"level":40,"time":1746218538312,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Order ID 30601:"}
{"level":40,"time":1746218538312,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"  - Item 58808: AI suggests more tasks (2) than exist (1). Creating missing tasks."}
{"level":30,"time":1746218538312,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"--- Recovery Summary ---"}
{"level":30,"time":1746218538312,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"Successfully recovered data for 3 orders (4 tasks)."}
{"level":30,"time":1746218538317,"pid":96790,"hostname":"DESKTOP-9HEOMKE","msg":"DB disconnected. Script finished."}
Disconnecting Prisma...
