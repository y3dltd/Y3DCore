
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  imageUrl: 'imageUrl',
  weight: 'weight',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fulfillment_sku: 'fulfillment_sku',
  item_weight_units: 'item_weight_units',
  item_weight_value: 'item_weight_value',
  shipstation_product_id: 'shipstation_product_id',
  upc: 'upc',
  warehouse_location: 'warehouse_location'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  shipstation_order_id: 'shipstation_order_id',
  shipstation_order_number: 'shipstation_order_number',
  customerId: 'customerId',
  customer_name: 'customer_name',
  order_status: 'order_status',
  order_key: 'order_key',
  order_date: 'order_date',
  payment_date: 'payment_date',
  ship_by_date: 'ship_by_date',
  shipping_price: 'shipping_price',
  tax_amount: 'tax_amount',
  discount_amount: 'discount_amount',
  shipping_amount_paid: 'shipping_amount_paid',
  shipping_tax: 'shipping_tax',
  total_price: 'total_price',
  gift: 'gift',
  gift_message: 'gift_message',
  gift_email: 'gift_email',
  requested_shipping_service: 'requested_shipping_service',
  carrier_code: 'carrier_code',
  service_code: 'service_code',
  package_code: 'package_code',
  confirmation: 'confirmation',
  tracking_number: 'tracking_number',
  shipped_date: 'shipped_date',
  warehouse_id: 'warehouse_id',
  customer_notes: 'customer_notes',
  internal_notes: 'internal_notes',
  last_sync_date: 'last_sync_date',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  marketplace: 'marketplace',
  amount_paid: 'amount_paid',
  order_weight_units: 'order_weight_units',
  order_weight_value: 'order_weight_value',
  payment_method: 'payment_method',
  shipstation_store_id: 'shipstation_store_id',
  tag_ids: 'tag_ids',
  dimensions_height: 'dimensions_height',
  dimensions_length: 'dimensions_length',
  dimensions_units: 'dimensions_units',
  dimensions_width: 'dimensions_width',
  insurance_insure_shipment: 'insurance_insure_shipment',
  insurance_insured_value: 'insurance_insured_value',
  insurance_provider: 'insurance_provider',
  internal_status: 'internal_status',
  is_voided: 'is_voided',
  marketplace_notified: 'marketplace_notified',
  void_date: 'void_date'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  shipstation_customer_id: 'shipstation_customer_id',
  company: 'company',
  street1: 'street1',
  street2: 'street2',
  street3: 'street3',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country: 'country',
  country_code: 'country_code',
  customer_notes: 'customer_notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  address_verified_status: 'address_verified_status',
  is_residential: 'is_residential'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  quantity: 'quantity',
  unit_price: 'unit_price',
  print_settings: 'print_settings',
  created_at: 'created_at',
  updated_at: 'updated_at',
  shipstationLineItemKey: 'shipstationLineItemKey',
  productId: 'productId'
};

exports.Prisma.PrintOrderTaskScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  marketplace_order_number: 'marketplace_order_number',
  customerId: 'customerId',
  custom_text: 'custom_text',
  quantity: 'quantity',
  color_1: 'color_1',
  color_2: 'color_2',
  ship_by_date: 'ship_by_date',
  status: 'status',
  stl_render_state: 'stl_render_state',
  stl_path: 'stl_path',
  render_retries: 'render_retries',
  needs_review: 'needs_review',
  review_reason: 'review_reason',
  created_at: 'created_at',
  updated_at: 'updated_at',
  orderItemId: 'orderItemId',
  taskIndex: 'taskIndex',
  productId: 'productId',
  shorthandProductName: 'shorthandProductName',
  annotation: 'annotation'
};

exports.Prisma.AmazonCustomizationFileScalarFieldEnum = {
  id: 'id',
  orderItemId: 'orderItemId',
  originalUrl: 'originalUrl',
  localFilePath: 'localFilePath',
  downloadStatus: 'downloadStatus',
  processingStatus: 'processingStatus',
  customText: 'customText',
  color1: 'color1',
  color2: 'color2',
  rawJsonData: 'rawJsonData',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  lastProcessedAt: 'lastProcessedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.System_logsScalarFieldEnum = {
  id: 'id',
  message: 'message',
  level: 'level',
  timestamp: 'timestamp'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  shipstation_tag_id: 'shipstation_tag_id',
  name: 'name',
  color_hex: 'color_hex',
  last_synced: 'last_synced'
};

exports.Prisma.ScriptRunLogScalarFieldEnum = {
  id: 'id',
  scriptName: 'scriptName',
  runStartedAt: 'runStartedAt',
  runEndedAt: 'runEndedAt',
  status: 'status',
  errorMessage: 'errorMessage',
  errorStack: 'errorStack',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.SyncProgressScalarFieldEnum = {
  id: 'id',
  syncType: 'syncType',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  totalOrders: 'totalOrders',
  processedOrders: 'processedOrders',
  failedOrders: 'failedOrders',
  lastProcessedOrderId: 'lastProcessedOrderId',
  lastProcessedTimestamp: 'lastProcessedTimestamp',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SyncMetricsScalarFieldEnum = {
  id: 'id',
  syncId: 'syncId',
  totalApiCalls: 'totalApiCalls',
  totalOrdersProcessed: 'totalOrdersProcessed',
  totalOrdersFailed: 'totalOrdersFailed',
  totalItemsProcessed: 'totalItemsProcessed',
  totalItemsFailed: 'totalItemsFailed',
  totalCustomersUpserted: 'totalCustomersUpserted',
  totalProductsUpserted: 'totalProductsUpserted',
  avgProcessingTimePerOrder: 'avgProcessingTimePerOrder',
  maxProcessingTimePerOrder: 'maxProcessingTimePerOrder',
  minProcessingTimePerOrder: 'minProcessingTimePerOrder',
  totalProcessingTime: 'totalProcessingTime',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt'
};

exports.Prisma.AiCallLogScalarFieldEnum = {
  id: 'id',
  scriptName: 'scriptName',
  orderId: 'orderId',
  orderNumber: 'orderNumber',
  marketplace: 'marketplace',
  aiProvider: 'aiProvider',
  modelUsed: 'modelUsed',
  promptSent: 'promptSent',
  rawResponse: 'rawResponse',
  processingTimeMs: 'processingTimeMs',
  success: 'success',
  errorMessage: 'errorMessage',
  tasksGenerated: 'tasksGenerated',
  needsReviewCount: 'needsReviewCount',
  createdAt: 'createdAt'
};

exports.Prisma.MetricScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  tags: 'tags',
  timestamp: 'timestamp'
};

exports.Prisma.AiReportDefinitionScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  description: 'description',
  systemPrompt: 'systemPrompt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiReportRunScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  inputJson: 'inputJson',
  outputJson: 'outputJson',
  rawResponse: 'rawResponse',
  status: 'status',
  errorMsg: 'errorMsg',
  createdAt: 'createdAt',
  finishedAt: 'finishedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  sku: 'sku',
  name: 'name',
  imageUrl: 'imageUrl',
  notes: 'notes',
  fulfillment_sku: 'fulfillment_sku',
  item_weight_units: 'item_weight_units',
  upc: 'upc',
  warehouse_location: 'warehouse_location'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  shipstation_order_id: 'shipstation_order_id',
  shipstation_order_number: 'shipstation_order_number',
  customer_name: 'customer_name',
  order_status: 'order_status',
  order_key: 'order_key',
  gift_message: 'gift_message',
  gift_email: 'gift_email',
  requested_shipping_service: 'requested_shipping_service',
  carrier_code: 'carrier_code',
  service_code: 'service_code',
  package_code: 'package_code',
  confirmation: 'confirmation',
  tracking_number: 'tracking_number',
  warehouse_id: 'warehouse_id',
  customer_notes: 'customer_notes',
  internal_notes: 'internal_notes',
  notes: 'notes',
  marketplace: 'marketplace',
  order_weight_units: 'order_weight_units',
  payment_method: 'payment_method',
  dimensions_units: 'dimensions_units',
  insurance_provider: 'insurance_provider'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  shipstation_customer_id: 'shipstation_customer_id',
  company: 'company',
  street1: 'street1',
  street2: 'street2',
  street3: 'street3',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country: 'country',
  country_code: 'country_code',
  customer_notes: 'customer_notes',
  address_verified_status: 'address_verified_status'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  shipstationLineItemKey: 'shipstationLineItemKey'
};

exports.Prisma.PrintOrderTaskOrderByRelevanceFieldEnum = {
  marketplace_order_number: 'marketplace_order_number',
  custom_text: 'custom_text',
  color_1: 'color_1',
  color_2: 'color_2',
  stl_path: 'stl_path',
  review_reason: 'review_reason',
  shorthandProductName: 'shorthandProductName',
  annotation: 'annotation'
};

exports.Prisma.AmazonCustomizationFileOrderByRelevanceFieldEnum = {
  originalUrl: 'originalUrl',
  localFilePath: 'localFilePath',
  downloadStatus: 'downloadStatus',
  processingStatus: 'processingStatus',
  customText: 'customText',
  color1: 'color1',
  color2: 'color2',
  errorMessage: 'errorMessage'
};

exports.Prisma.system_logsOrderByRelevanceFieldEnum = {
  message: 'message',
  level: 'level'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  name: 'name',
  color_hex: 'color_hex'
};

exports.Prisma.ScriptRunLogOrderByRelevanceFieldEnum = {
  scriptName: 'scriptName',
  status: 'status',
  errorMessage: 'errorMessage',
  errorStack: 'errorStack'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  name: 'name',
  image: 'image'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  sessionToken: 'sessionToken'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.SyncProgressOrderByRelevanceFieldEnum = {
  id: 'id',
  syncType: 'syncType',
  status: 'status',
  lastProcessedOrderId: 'lastProcessedOrderId',
  error: 'error'
};

exports.Prisma.SyncMetricsOrderByRelevanceFieldEnum = {
  id: 'id',
  syncId: 'syncId'
};

exports.Prisma.AiCallLogOrderByRelevanceFieldEnum = {
  id: 'id',
  scriptName: 'scriptName',
  orderNumber: 'orderNumber',
  marketplace: 'marketplace',
  aiProvider: 'aiProvider',
  modelUsed: 'modelUsed',
  promptSent: 'promptSent',
  rawResponse: 'rawResponse',
  errorMessage: 'errorMessage'
};

exports.Prisma.MetricOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.AiReportDefinitionOrderByRelevanceFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  description: 'description',
  systemPrompt: 'systemPrompt'
};

exports.Prisma.AiReportRunOrderByRelevanceFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  rawResponse: 'rawResponse',
  status: 'status',
  errorMsg: 'errorMsg'
};
exports.InternalOrderStatus = exports.$Enums.InternalOrderStatus = {
  new: 'new',
  processing: 'processing',
  printing: 'printing',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.PrintTaskStatus = exports.$Enums.PrintTaskStatus = {
  pending: 'pending',
  in_progress: 'in_progress',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.StlRenderStatus = exports.$Enums.StlRenderStatus = {
  pending: 'pending',
  running: 'running',
  completed: 'completed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Product: 'Product',
  Order: 'Order',
  Customer: 'Customer',
  OrderItem: 'OrderItem',
  PrintOrderTask: 'PrintOrderTask',
  AmazonCustomizationFile: 'AmazonCustomizationFile',
  system_logs: 'system_logs',
  Tag: 'Tag',
  ScriptRunLog: 'ScriptRunLog',
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  SyncProgress: 'SyncProgress',
  SyncMetrics: 'SyncMetrics',
  AiCallLog: 'AiCallLog',
  Metric: 'Metric',
  AiReportDefinition: 'AiReportDefinition',
  AiReportRun: 'AiReportRun'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
