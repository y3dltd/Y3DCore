/**
 * Amazon Customization Workflow
 * 
 * This module provides the core workflow logic for the Amazon customization process.
 * It orchestrates the following steps:
 * 1. Download and process Amazon customization files
 * 2. Update order items with personalization data
 * 3. Update ShipStation with personalization data
 * 4. Update print tasks with personalization data
 */

import { PrismaClient } from '@prisma/client';
import { info, error, warning, debug } from '@/lib/logger';

// Import other modules
import { syncCustomizationFiles } from './sync';
import { updateOrderItems } from './update';
import { updatePrintTasks } from './tasks';

// Define the options interface
export interface WorkflowOptions {
  orderId?: number;
  daysBack?: number;
  hours?: number;
  limit?: number;
  verbose?: boolean;
  dryRun?: boolean;
  createPrintTasks?: boolean;
  updateShipstation?: boolean;
  retryFailed?: boolean;
  maxRetries?: number;
}

// Define the result interface
export interface WorkflowResult {
  sync: {
    success: number;
    failed: number;
    skipped: number;
  };
  update: {
    success: number;
    failed: number;
    skipped: number;
  };
  tasks: {
    success: number;
    failed: number;
    skipped: number;
  };
  overall: {
    success: boolean;
    message: string;
  };
}

/**
 * Run the entire Amazon customization workflow
 * 
 * @param prisma Prisma client instance
 * @param options Workflow options
 * @returns Workflow result
 */
export async function runWorkflow(
  prisma: PrismaClient,
  options: WorkflowOptions
): Promise<WorkflowResult> {
  // Initialize the result
  const result: WorkflowResult = {
    sync: { success: 0, failed: 0, skipped: 0 },
    update: { success: 0, failed: 0, skipped: 0 },
    tasks: { success: 0, failed: 0, skipped: 0 },
    overall: { success: false, message: '' }
  };

  try {
    // Step 1: Download and process Amazon customization files
    info('Starting Step 1: Download and process Amazon customization files');
    
    const syncOptions = {
      ...options,
      retryFailed: options.retryFailed || false,
      maxRetries: options.maxRetries || 3
    };
    
    const syncResult = await syncCustomizationFiles(prisma, syncOptions);
    result.sync = syncResult;
    
    info('Completed Step 1', syncResult);

    // Step 2: Update order items with personalization data
    info('Starting Step 2: Update order items with personalization data');
    
    const updateOptions = {
      ...options,
      createPrintTasks: options.createPrintTasks || true,
      updateShipstation: options.updateShipstation || true
    };
    
    const updateResult = await updateOrderItems(prisma, updateOptions);
    result.update = updateResult;
    
    info('Completed Step 2', updateResult);

    // Step 3: Update print tasks with personalization data
    info('Starting Step 3: Update print tasks with personalization data');
    
    const tasksResult = await updatePrintTasks(prisma, options);
    result.tasks = tasksResult;
    
    info('Completed Step 3', tasksResult);

    // Set overall result
    result.overall.success = true;
    result.overall.message = 'Workflow completed successfully';
    
    return result;
  } catch (err) {
    // Handle errors
    const errorMessage = err instanceof Error ? err.message : String(err);
    error('Error in workflow', { error: errorMessage });
    
    result.overall.success = false;
    result.overall.message = `Workflow failed: ${errorMessage}`;
    
    return result;
  }
}

/**
 * Get the status of the Amazon customization workflow
 * 
 * @param prisma Prisma client instance
 * @param options Workflow options
 * @returns Workflow status
 */
export async function getWorkflowStatus(
  prisma: PrismaClient,
  options: WorkflowOptions
): Promise<any> {
  try {
    // TODO: Implement status reporting
    return {
      status: 'Not implemented yet'
    };
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : String(err);
    error('Error getting workflow status', { error: errorMessage });
    throw err;
  }
}
